{"version":3,"sources":["constants/enum/signalREvent.ts","reportWebVitals.ts","helper/typescriptHacks.ts","constants/enum/storageType.ts","services/StorageService.ts","services/api/BaseApiService.ts","services/api/LoginService.ts","constants/enum/apiEndpoints.ts","services/api/StreamService.ts","services/common/signal/EmoteClient.ts","services/common/signal/BaseClient.ts","constants/toast.ts","services/common/toast/toastService.ts","services/twitch/TwitchAuthenticationService.ts","integration/dependencyInjection.tsx","utils.ts","redux/cacheKey.ts","redux/modules/common/type.ts","redux/modules/common/index.ts","redux/modules/setting/type.ts","redux/modules/setting/index.ts","redux/modules/common/action.ts","redux/index.ts","serviceWorker.ts","components/common/scroll/scrollToTop.tsx","constants/wrapperStyleType.ts","constants/site.ts","contracts/generated/Enum/oAuthProviderType.ts","components/core/link.tsx","components/common/socialBtn/googleButton.tsx","redux/modules/common/selector.ts","components/dialog/baseDialog.tsx","constants/emote/emoteButton.ts","components/dialog/login/loginDialog.tsx","components/dialog/login/loginDialog.redux.ts","components/dialog/login/loginDialog.dependencyInjection.ts","components/common/header.tsx","components/common/scroll/scrollDownIndicator.tsx","components/common/banner.tsx","components/common/navbar.tsx","components/common/footer.tsx","constants/emote/emoteTags.ts","constants/emote/streamEmotes.ts","helper/dateHelper.ts","components/core/image.tsx","components/streamEmotes/streamEmoteButtonIcon.tsx","components/streamEmotes/streamEmoteComponents.tsx","components/streamEmotes/streamEmoteButton.tsx","components/streamEmotes/streamEmotePresenter.tsx","components/streamEmotes/streamEmoteContainer.tsx","components/streamEmotes/streamEmote.tsx","constants/emote/emoteConstraints.ts","components/streamEmotes/streamEmote.Redux.ts","components/streamEmotes/streamEmote.dependencyInjection.ts","components/videoColumnSection.tsx","pages/home.tsx","components/leaderboard/leaderboard.tsx","constants/emote/animationDurationTypes.ts","constants/emote/majorAnimationTypes.ts","constants/emote/minorAnimationTypes.ts","helper/randomHelper.ts","pages/dashboard/dashboard.tsx","pages/dashboard/dashboard.dependencyInjection.ts","components/loading.tsx","pages/twitch/videoOverlay.tsx","pages/twitch/videoOverlay.dependencyInjection.ts","appShell.tsx","helper/documentHelper.ts","constants/route.ts","index.tsx","redux/stateFromLocalStorage.ts"],"names":["SignalRSendEvent","SignalRReceiveEvent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","anyObject","token","StorageService","key","itemString","localStorage","getItem","item","JSON","parse","data","expiryDate","moment","isAfter","isSuccess","value","errorMessage","expiry","oneHourFromNow","add","toDate","setItem","stringify","BaseApiService","newBaseUrl","_baseUrl","window","config","apiUrl","setInterceptors","axios","defaults","headers","common","this","tokenFromStorage","get","storageType","ex","url","result","message","manipulateHeaders","post","statusCode","status","response","delete","LoginService","oAuthObj","a","userGuid","timeTillExpiry","tokenexpiry","userguid","storageServ","set","username","apiResult","loginData","userName","secondsTillExpire","userProfileUrl","profileUrl","StreamService","searchObj","EmoteClient","listenToEmote","callBack","addListener","Emote","removeListenToEmote","removeListener","sendEmote","emoteId","sendPayload","SubmitEmote","emote","captcha","listenToShowLeaderboard","ShowLeaderboard","removeListenShowLeaderboard","sendShowLeaderboard","_connection","isConnected","state","HubConnectionState","Connected","channel","logMessage","toString","on","off","payload","channelString","send","console","error","warn","consoleLogDebug","optionalParams","log","HubConnectionBuilder","withUrl","withAutomaticReconnect","build","start","defaultToastProps","position","autoClose","rtl","hideProgressBar","closeOnClick","pauseOnFocusLoss","draggable","pauseOnHover","ToastService","success","displayProps","toast","jwt","require","TwitchAuthenticationService","props","opaque_id","user_id","isMod","role","decoded","decode","e","method","Promise","resolve","reject","isAuthenticated","fetch","catch","React","Component","defaultDependencyInjectionFunc","loginService","emoteClient","twitchAuthService","streamService","toastService","DependencyInjectionContext","createContext","DependencyInjectionProvider","children","Provider","withServices","WrappedComponent","mapper","Consumer","services","defaultConfig","googleAnalyticsEnabled","useServiceWorker","CommonReducerKey","SettingReducerKey","LOADING","LOGIN","LOGOUT","initialCommonState","isLoading","title","userDetailsExpiryDate","Date","DARKMODE","TOGGLEMENU","initialSettingState","isDark","menuIsVisible","setLoadingStatus","text","type","reducer","combineReducers","commonReducer","action","Object","assign","userDetailsDate","settingReducer","htmlTag","document","querySelector","classList","toggle","contains","isLocalhost","Boolean","location","hostname","match","register","navigator","URL","process","href","origin","addEventListener","swUrl","contentType","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ScrollToTopWithoutRoute","prevProps","scrollTo","ScrollToTop","withRouter","Wrapper","style1","style2","OAuthProviderType","site","fullName","nickName","website","twitter","github","twitch","name","email","tools","discord","patreon","BasicLink","baseUrl","includes","target","rel","className","classNames","additionalClassNames","CustomGoogleLoginButton","styleObj","opacity","disabled","style","onClick","getIsLoading","getUserGuid","getIsExpiredUserDetailsDate","getUserProfileUrl","getUserName","customStyles","content","top","left","right","bottom","marginRight","minWidth","minHeight","transform","Modal","setAppElement","EmoteButton","BasicDialog","useState","isOpen","modalIsOpen","setIsOpen","isModalActuallyOpen","icon","onOpen","onRequestClose","onClose","contentLabel","preventScroll","parentSelector","getElementById","LoginDialogUnconnected","toggleModalOpen","setState","prevState","isModalOpen","responseGoogle","tokenId","profileObj","accessToken","imageUrl","oAuthLoginFailure","custom","apiObj","oAuthType","loginWithOAuth","loginResult","login","Swal","fire","details","oAuthLogout","allowEnterKey","allowEscapeKey","showCancelButton","answer","isConfirmed","logout","isLoggedIn","length","hideWhenLoggedIn","hideWhenNotLoggedIn","LoginComponent","src","alt","clientId","googleClientId","render","renderProps","buttonText","google","onFailure","cookiePolicy","LoginDialog","connect","dispatch","newProps","Header","id","toggleDrawer","ScrollDownArrowsIndicator","Banner","videoRef","useRef","previousUrl","useEffect","current","videoUrl","setTimeout","load","data-video","ref","autoPlay","muted","loop","Navbar","showDrawer","visible","Footer","packageJson","version","EmoteTag","StreamAvailableEmotes","sClass","tags","sortOrder","aClass","ok","corruptedDrone","seanMindBlown","seanHead","bunnyheart","yay","ficsit","ficsitThumbsUp","stonks","pikaWhat","amongUs","amongUsDance","report","facepalm","fakeNews","bro","pressF","programming","eddisonLol","eddisonSir","eddisonLifeJacket","eddisonOnCouch","bClass","cClass","thumbsUp","expPatchNull","expPatchUnderwater","expPatchUnits","goldenGek","pioneerBadge","pioneerTrophy","units","nanites","waveAnomaly","wonder","atlas","ficsitHead","ficsitCoupon","catHands","cool","coolThinking","yes","no","hype","kittyGun","dancingHamster","dancingPanda","StreamAvailableEmotesForDash","filter","sae","dayjs","addMinutes","date","minutes","addMilliseconds","milliseconds","BasicImage","imageName","StreamEmoteButtonIcon","find","ae","successEmoteSubmitted","newSelectedEmote","errorEmoteNotSubmitted","StreamEmoteButton","active","isActive","StreamEmotePresenter","buttonArray","image","tagContains","selectedSectionIndex","availableEmotes","some","t","ButtonGroup","color","aria-label","map","button","index","Button","onSectionClick","width","receivedEmotes","findIndex","re","selectedEmote","setCurrentEmote","onShowLeaderboardClick","verticalAlign","height","StreamEmoteContainer","captchaRef","createRef","newSelectedSectionIndex","StreamEmoteUnconnected","localProps","getValidEmotes","emotesList","receiveSelectedEmote","newEmote","newItem","validEmotes","emotesHistory","vh","allowOutsideClick","execute","emoteWithLogin","submitEmoteResult","showLeaderboardHistory","none","sort","b","wrapperClass","sitekey","theme","size","onVerify","emoteWithCaptcha","resetCaptcha","StreamEmote","VideoColumnSection","subtitleComponent","flexClass","items","link","HomePage","setShowDrawer","Leaderboard","rankings","score","slice","numberOfUsersOnLeaderboard","show","showLeaderboard","MajorAnimationDurationTypes","MinorAnimationDurationTypes","MajorAnimationTypes","MajorAnimationVariationTypes","commonMinorAnimationTypes","MinorAnimationTypes","RiggedDie","getNewDieInstance","max","riggedRoll","riggedDie","possibleOptions","roll","DashboardPage","timer","leaderboardDetailsFunc","showLeaderboardDate","getLeaderboardDate","isBefore","randomEmote","randomEmoteDice","newStateManipulate","manipulateStateOnSelectedEmote","newState","addToLeaderboard","newEmoteViewModel","newLeaderboard","leaderboardUsers","userId","currentUserIndex","l","push","currentUser","futureDate","currentDate","userSubmittedShowLeaderboard","selectedEmotes","setSelectedEmote","seconds","majorAnimClass","majorAnimationDice","majorAnimDurClass","majorAnimationDurationDice","majorAnimVariantClass","majorAnimationVariationDice","minorAnimClass","minorAnimationDice","minorAnimDurClass","minorAnimationDurationDice","newEmoteObj","validSelectedEmotes","renderEmote","emoteObj","keyBase","toISOString","data-key","intervalId","undefined","setInterval","clearInterval","node","SmallLoading","textAlign","display","VideoOverlayPage","Twitch","ext","finishedLoading","isVisible","onAuthorized","auth","setToken","listen","body","rig","onVisibilityChanged","_c","visibilityChanged","onContext","context","delta","unlisten","App","remove","exact","path","component","persistedState","storedCommonReducer","CacheKey","storedSettingReducer","loadStateFromLocalStorage","store","createStore","subscribe","currentCommonReducer","getState","currentSettingReducer","saveStateToLocalStorage","callback","xhr","XMLHttpRequest","open","responseType","onload","getJSON","app","StrictMode","newestOnTop","ReactDOM"],"mappings":"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","file":"static/js/main.c7070e78.chunk.js","sourcesContent":["export enum SignalRSendEvent {\n    SubmitEmote,\n    ShowLeaderboard,\n}\n\nexport enum SignalRReceiveEvent {\n    Emote,\n    ShowLeaderboard,\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export const anyObject: any = {};\n","export const token = 'token';\nexport const tokenExpiry = 'tokenExpiry';\nexport const userGuid = 'userGuid';\nexport const userName = 'userName';","import moment from 'moment';\nimport { ResultWithValue } from '../contracts/results/ResultWithValue';\nimport { StorageItem } from '../contracts/storageItem';\nimport { anyObject } from '../helper/typescriptHacks';\n\nexport class StorageService {\n    public get<T>(key: string): ResultWithValue<T> {\n        const itemString = localStorage.getItem(key) || '{}';\n        const item: StorageItem<T> = JSON.parse(itemString);\n\n        if (item != null && item.data != null && item.expiryDate != null) {\n            if (moment(item.expiryDate).isAfter(moment())) {\n                return {\n                    isSuccess: true,\n                    value: item.data,\n                    errorMessage: '',\n                }\n            }\n        }\n\n        return {\n            isSuccess: false,\n            value: anyObject,\n            errorMessage: 'could not load item from strage',\n        }\n    }\n\n    public set<T>(key: string, data: T, expiry?: Date): void {\n        var oneHourFromNow = moment().add(1, 'hour');\n\n        const item: StorageItem<T> = {\n            data: data,\n            expiryDate: expiry || oneHourFromNow.toDate()\n        };\n\n        localStorage.setItem(key, JSON.stringify(item));\n    }\n}\n","import axios from 'axios';\nimport * as storageType from '../../constants/enum/storageType';\nimport { Result, ResultWithValue } from '../../contracts/results/ResultWithValue';\nimport { anyObject } from '../../helper/typescriptHacks';\nimport { StorageService } from '../StorageService';\n\n\ndeclare global {\n  interface Window { config: any }\n}\n\nexport class BaseApiService {\n  private _baseUrl: String = window.config.apiUrl;\n\n  constructor(newBaseUrl?: String) {\n    if (newBaseUrl != null) this._baseUrl = newBaseUrl;\n\n    try {\n      const storageServ = new StorageService();\n      const tokenFromStorage = storageServ.get<string>(storageType.token);\n      if (tokenFromStorage.isSuccess) this.setInterceptors(tokenFromStorage.value);\n    } catch (ex) { }\n  }\n\n  setInterceptors = (token: string) => {\n    axios.defaults.headers.common['Authorization'] = 'Bearer ' + token;\n  };\n\n  protected async get<T>(url: string): Promise<ResultWithValue<T>> {\n    try {\n      const result = await axios.get<T>(`${this._baseUrl}/${url}`);\n      return {\n        isSuccess: true,\n        value: result.data,\n        errorMessage: ''\n      }\n    } catch (ex) {\n      return {\n        isSuccess: false,\n        value: anyObject,\n        errorMessage: ex.message\n      }\n    }\n  }\n\n  protected async post<T>(url: string, data: any, manipulateHeaders?: (headers: any) => void): Promise<ResultWithValue<T>> {\n    try {\n      const result = await axios.post<T>(`${this._baseUrl}/${url}`, data);\n      if (manipulateHeaders != null) manipulateHeaders(result.headers);\n      return {\n        isSuccess: true,\n        statusCode: result?.status ?? 200,\n        value: result.data,\n        errorMessage: ''\n      }\n    } catch (ex) {\n      return {\n        isSuccess: false,\n        value: anyObject,\n        statusCode: ex.response?.status,\n        errorMessage: ex.message\n      }\n    }\n  }\n\n  protected async delete(url: string, manipulateHeaders?: (headers: any) => void): Promise<Result> {\n    try {\n      const result = await axios.delete(`${this._baseUrl}/${url}`);\n      if (manipulateHeaders != null) manipulateHeaders(result.headers);\n      return {\n        isSuccess: true,\n        errorMessage: ''\n      }\n    } catch (ex) {\n      return {\n        isSuccess: false,\n        errorMessage: ex.message\n      }\n    }\n  }\n}\n","import moment from 'moment';\nimport * as apiEndpoints from '../../constants/enum/apiEndpoints';\nimport * as storageType from '../../constants/enum/storageType';\nimport { OAuthUserViewModel } from '../../contracts/generated/ViewModel/oAuthUserViewModel';\nimport { ResultWithValue } from '../../contracts/results/ResultWithValue';\nimport { BaseApiService } from './BaseApiService';\nimport { StorageService } from '../StorageService';\nimport { ILoginProps } from '../../contracts/login';\n\nexport class LoginService extends BaseApiService {\n    async loginWithOAuth(oAuthObj: OAuthUserViewModel): Promise<ResultWithValue<ILoginProps>> {\n        var userGuid = '';\n        var timeTillExpiry = 0;\n\n        var apiResult = await this.post(apiEndpoints.authUrl, oAuthObj, (headers) => {\n            var token = headers.token;\n            timeTillExpiry = headers.tokenexpiry;\n            userGuid = headers.userguid;\n\n            this.setInterceptors(token);\n            var expiry = moment().add(timeTillExpiry, 'seconds');\n\n            var storageServ = new StorageService();\n            storageServ.set(storageType.token, token, expiry.toDate());\n            storageServ.set(storageType.userGuid, userGuid, expiry.toDate());\n            storageServ.set(storageType.userName, oAuthObj.username, expiry.toDate());\n        });\n\n        const loginData: ILoginProps = {\n            userGuid: userGuid,\n            userName: oAuthObj.username,\n            secondsTillExpire: timeTillExpiry,\n            userProfileUrl: oAuthObj.profileUrl,\n        };\n\n        return {\n            isSuccess: apiResult.isSuccess,\n            value: loginData,\n            errorMessage: apiResult.errorMessage,\n        };\n    }\n}\n","export const app = 'app';\nexport const language = 'language';\nexport const translation = 'translation';\nexport const translationKeySearch = 'translationKey/Search';\nexport const translationKeySearchDropdown = 'translationKey/SearchDropdown';\nexport const translationKeyImages = 'translationImage';\nexport const translationVotes = 'translationvote';\nexport const translationReports = 'translation/Report';\nexport const translationsPerLangGraph = 'translation/Graph/TranslationsPerLanguage';\nexport const streamEmoteWithCaptcha = 'stream/EmoteWithCaptcha';\nexport const streamEmoteWhileLoggedIn = 'stream/LoggedInEmote';\nexport const patreon = 'patreon';\nexport const authUrl = 'Account/Login';","import * as apiEndpoints from '../../constants/enum/apiEndpoints';\nimport { StreamEmoteViewModel } from '../../contracts/generated/ViewModel/Emote/streamEmoteViewModel';\nimport { Result } from '../../contracts/results/ResultWithValue';\nimport { BaseApiService } from './BaseApiService';\n\nexport class StreamService extends BaseApiService {\n\n    async emoteWithCaptcha(searchObj: StreamEmoteViewModel): Promise<Result> {\n        return await this.post(apiEndpoints.streamEmoteWithCaptcha, searchObj);\n    }\n\n    async emoteWithLogin(searchObj: StreamEmoteViewModel): Promise<Result> {\n        return await this.post(apiEndpoints.streamEmoteWhileLoggedIn, searchObj);\n    }\n\n}\n","import { EmoteButton } from '../../../constants/emote/emoteButton';\nimport { SignalRSendEvent, SignalRReceiveEvent } from '../../../constants/enum/signalREvent';\nimport { SubmitEmote } from '../../../contracts/generated/Hub/submitEmote';\nimport { StreamEmoteFromUserViewModel } from '../../../contracts/generated/ViewModel/Emote/streamEmoteFromUserViewModel';\nimport { BaseClient } from './BaseClient';\n\nexport class EmoteClient extends BaseClient {\n    listenToEmote = (callBack: (id: StreamEmoteFromUserViewModel | any) => void) => {\n        this.addListener(SignalRReceiveEvent.Emote, callBack);\n    }\n\n    removeListenToEmote = (callBack: (id: StreamEmoteFromUserViewModel | any) => void) => {\n        this.removeListener(SignalRReceiveEvent.Emote, callBack);\n    }\n\n    sendEmote = (emoteId: EmoteButton) => {\n        this.sendPayload<SubmitEmote>(SignalRSendEvent.SubmitEmote, {\n            emote: emoteId,\n            captcha: '',\n        });\n    }\n\n    listenToShowLeaderboard = (callBack: (id: any) => void) => {\n        this.addListener(SignalRReceiveEvent.ShowLeaderboard, callBack);\n    }\n\n    removeListenShowLeaderboard = (callBack: (id: any) => void) => {\n        this.removeListener(SignalRReceiveEvent.ShowLeaderboard, callBack);\n    }\n\n    sendShowLeaderboard = () => this.sendPayload(SignalRSendEvent.ShowLeaderboard);\n}\n","import { HubConnection, HubConnectionBuilder, HubConnectionState } from '@microsoft/signalr';\nimport { SignalRSendEvent, SignalRReceiveEvent } from '../../../constants/enum/signalREvent';\n\ndeclare global {\n    interface Window { config: any }\n}\n\nexport class BaseClient {\n    private _baseUrl: String = window.config.apiUrl;\n    private _connection: HubConnection;\n\n    constructor(newBaseUrl?: String) {\n        if (newBaseUrl != null) this._baseUrl = newBaseUrl;\n        this._connection = new HubConnectionBuilder()\n            .withUrl(this._baseUrl + '/hubs/stream')\n            .withAutomaticReconnect()\n            .build();\n        this._connection.start().then(() => this.logMessage('signalR connection'));\n    }\n\n    isConnected = (): boolean => {\n        return this._connection.state === HubConnectionState.Connected;\n    }\n\n    protected addListener = (channel: SignalRReceiveEvent, callBack: (args: any[]) => void) => {\n        this.logMessage(`Listener created for: ${SignalRReceiveEvent[channel].toString()}`);\n        this._connection.on(SignalRReceiveEvent[channel].toString(), callBack);\n    }\n\n    protected removeListener = (channel: SignalRReceiveEvent, callBack: (args: any[]) => void) => {\n        this.logMessage(`Listener removed for: ${SignalRReceiveEvent[channel].toString()}`);\n        this._connection.off(SignalRReceiveEvent[channel].toString(), callBack);\n    }\n\n    protected sendPayload = async <T>(channel: SignalRSendEvent, payload?: T) => {\n        if (this.isConnected()) {\n            try {\n                const channelString = SignalRSendEvent[channel].toString();\n                if (payload != null) {\n                    await this._connection.send(channelString, payload);\n                } else {\n                    await this._connection.send(channelString);\n                }\n                this.logMessage('Message sent!', `channel: ${channelString}`, payload);\n            }\n            catch (e) {\n                console.error('sendPayload error', e);\n            }\n        }\n        else {\n            console.warn('No connection, cannot send payload!')\n        }\n    }\n\n    private logMessage = (message: string, ...optionalParams: any[]) => {\n        if (!window.config.consoleLogDebug) return;\n        console.log(message, optionalParams);\n    }\n}\n","import { ToastOptions } from \"react-toastify\";\n\nexport const defaultToastProps: ToastOptions = {\n    position: 'top-right',\n    autoClose: 5000,\n    rtl: false,\n    hideProgressBar: false,\n    closeOnClick: true,\n    pauseOnFocusLoss: false,\n    draggable: true,\n    pauseOnHover: true,\n};\n","import { ReactNode } from 'react';\nimport { toast, ToastOptions } from 'react-toastify';\nimport { defaultToastProps } from '../../../constants/toast';\n\nexport class ToastService {\n\n    success = (message: string | ReactNode, displayProps?: ToastOptions): void => {\n        toast.success(message, { ...defaultToastProps, ...displayProps });\n    }\n\n    error = (message: string | ReactNode, displayProps?: ToastOptions): void => {\n        toast.error(message, { ...defaultToastProps, ...displayProps });\n    }\n}\n","import React from \"react\"\n\nconst jwt = require('jsonwebtoken')\n\n/**\n * Helper class for authentication against an EBS service. Allows the storage of a token to be accessed across componenents. \n * This is not meant to be a source of truth. Use only for presentational purposes. \n */\n\ninterface IProps { }\ninterface IState {\n    token: string,\n    opaque_id: string,\n    user_id: string,\n    isMod: boolean,\n    role: string\n}\n\nexport class TwitchAuthenticationService extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n        this.state = {\n            token: '',\n            opaque_id: '',\n            user_id: '',\n            isMod: false,\n            role: \"\"\n        }\n    }\n\n    isLoggedIn() {\n        return this.state.opaque_id[0] === 'U' ? true : false\n    }\n\n    // This does guarantee the user is a moderator- this is fairly simple to bypass - so pass the JWT and verify\n    // server-side that this is true. This, however, allows you to render client-side UI for users without holding on a backend to verify the JWT. \n    // Additionally, this will only show if the user shared their ID, otherwise it will return false. \n    isModerator() {\n        return this.state.isMod\n    }\n\n    // similar to mod status, this isn't always verifiable, so have your backend verify before proceeding. \n    hasSharedId() {\n        return !!this.state.user_id\n    }\n\n    getUserId() {\n        return this.state.user_id\n    }\n\n    getOpaqueId() {\n        return this.state.opaque_id\n    }\n\n    // set the token in the Authentication componenent state\n    // this is naive, and will work with whatever token is returned. under no circumstances should you use this logic to trust private data- you should always verify the token on the backend before displaying that data. \n    setToken(token: string, opaque_id: string) {\n        let isMod = false\n        let role = \"\"\n        let user_id = \"\"\n\n        try {\n            let decoded = jwt.decode(token)\n\n            if (decoded.role === 'broadcaster' || decoded.role === 'moderator') {\n                isMod = true\n            }\n\n            user_id = decoded.user_id\n            role = decoded.role\n        } catch (e) {\n            token = ''\n            opaque_id = ''\n        }\n\n        this.state = {\n            token,\n            opaque_id,\n            isMod,\n            user_id,\n            role\n        }\n    }\n\n    // checks to ensure there is a valid token in the state\n    isAuthenticated() {\n        if (this.state.token && this.state.opaque_id) {\n            return true\n        } else {\n            return false\n        }\n    }\n\n    /**\n     * Makes a call against a given endpoint using a specific method. \n     * \n     * Returns a Promise with the Request() object per fetch documentation.\n     * \n     */\n\n    makeCall(url: string, method: string = \"GET\") {\n        return new Promise((resolve, reject) => {\n            if (this.isAuthenticated()) {\n                let headers = {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${this.state.token}`\n                }\n\n                fetch(url,\n                    {\n                        method,\n                        headers,\n                    })\n                    .then(response => resolve(response))\n                    .catch(e => reject(e))\n            } else {\n                reject('Unauthorized')\n            }\n        })\n    }\n}","import React from \"react\";\nimport { anyObject } from \"../helper/typescriptHacks\";\nimport { LoginService } from \"../services/api/LoginService\";\nimport { StreamService } from \"../services/api/StreamService\";\nimport { EmoteClient } from \"../services/common/signal/EmoteClient\";\nimport { ToastService } from \"../services/common/toast/toastService\";\nimport { TwitchAuthenticationService } from \"../services/twitch/TwitchAuthenticationService\";\n\nexport interface IDependencyInjection {\n    loginService: LoginService;\n    emoteClient: EmoteClient;\n    twitchAuthService: TwitchAuthenticationService;\n\n    // Common\n    streamService: StreamService;\n    toastService: ToastService;\n}\n\ntype GetServices = () => IDependencyInjection;\nexport const defaultDependencyInjectionFunc: GetServices = () => {\n    return {\n        loginService: new LoginService(),\n        emoteClient: new EmoteClient(),\n        twitchAuthService: new TwitchAuthenticationService(anyObject),\n\n        // Common\n        streamService: new StreamService(),\n        toastService: new ToastService(),\n    }\n}\n\nexport const DependencyInjectionContext = React.createContext<IDependencyInjection>(anyObject);\n\nexport const DependencyInjectionProvider: React.FC = ({ children }) => {\n    return (\n        <DependencyInjectionContext.Provider value={defaultDependencyInjectionFunc()}>\n            {children}\n        </DependencyInjectionContext.Provider>\n    );\n};\n\nexport function withDependencyInjectionProvider<TProps>(WrappedComponent: any): (React.FC<TProps>) {\n    return (props: TProps) => (\n        <DependencyInjectionContext.Provider value={defaultDependencyInjectionFunc()}>\n            <WrappedComponent {...props} />\n        </DependencyInjectionContext.Provider>\n    );\n};\n\nexport function withServices<WithoutExpectedServicesType, ExpectedServicesType>(WrappedComponent: any, mapper: (services: IDependencyInjection) => ExpectedServicesType) {\n    const wrapper: React.FC<WithoutExpectedServicesType> = (props: WithoutExpectedServicesType) => {\n        return (\n            <DependencyInjectionContext.Consumer>\n                {\n                    (services: IDependencyInjection) =>\n                        <WrappedComponent {...(mapper(services))} {...props} />\n                }\n            </DependencyInjectionContext.Consumer>\n        );\n    }\n    return wrapper;\n}","export const getJSON = (url: string, callback: any) => {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'json';\n    xhr.onload = function () {\n        var status = xhr.status;\n        if (status === 200) {\n            callback(true, xhr.response);\n        } else {\n            callback(false, xhr.response);\n        }\n    };\n    xhr.send();\n};\n\nexport const defaultConfig = {\n    googleAnalyticsEnabled: false,\n    consoleLogDebug: true,\n    useServiceWorker: false,\n    reportWebVitals: false,\n    apiUrl: \"https://api.assistantapps.com\",\n}","export const CommonReducerKey = 'CommonReducer';\nexport const SettingReducerKey = 'SettingReducer';","export const LOADING = '@@common/Loading';\nexport const LOGIN = '@@common/Login';\nexport const LOGOUT = '@@common/Logout';","import * as type from './type'\nimport { StateCommonReducer } from '../../state/StateCommonReducer';\nimport moment from 'moment';\n\nexport const initialCommonState: StateCommonReducer = {\n    isLoading: false,\n    title: \"Loading\",\n    userGuid: '',\n    userName: '',\n    userProfileUrl: '',\n    userDetailsExpiryDate: new Date(),\n}\n\nexport const commonReducer = (state = initialCommonState, action: any) => {\n    switch (action.type) {\n        case type.LOADING:\n            return Object.assign({}, state, {\n                isLoading: action.isLoading,\n                text: action.text\n            });\n        case type.LOGIN:\n            console.log(moment().add(action.secondsTillExpire, 'seconds').toDate());\n            return Object.assign({}, state, {\n                userGuid: action.userGuid,\n                userName: action.userName,\n                userProfileUrl: action.userProfileUrl,\n                userDetailsExpiryDate: moment().add(action.secondsTillExpire, 'seconds').toDate(),\n            });\n        case type.LOGOUT:\n            return Object.assign({}, state, {\n                userGuid: '',\n                userName: '',\n                userProfileUrl: '',\n                userDetailsDate: null,\n            });\n        default:\n            return state\n    }\n}\n","export const DARKMODE = '@@common/DarkMode';\nexport const TOGGLEMENU = '@@common/ToggleMenu';","import * as type from './type';\n\nimport { StateSettingReducer } from '../../state/StateSettingReducer';\n\nexport const initialSettingState: StateSettingReducer = {\n    isDark: true,\n    menuIsVisible: false,\n}\n\nexport const settingReducer = (state = initialSettingState, action: any) => {\n    switch (action.type) {\n        case type.DARKMODE:\n            return Object.assign({}, state, {\n                isDark: action.isDark\n            });\n        case type.TOGGLEMENU:\n            const htmlTag = document.querySelector('html');\n            if (htmlTag != null) {\n                htmlTag.classList.toggle('nav-open');\n            }\n            return Object.assign({}, state, {\n                menuIsVisible: htmlTag?.classList?.contains('nav-open') ?? false\n            });\n        default:\n            return state\n    }\n}\n","import * as type from \"./type\";\nimport { ILoginProps } from '../../../contracts/login';\n\nexport const setLoadingStatus = (isLoading: boolean, text?: string) => {\n    return {\n        isLoading,\n        text: text || 'Loading',\n        type: type.LOADING,\n    }\n}\n\n\nexport const login = (login: ILoginProps) => {\n    return {\n        ...login,\n        type: type.LOGIN,\n    }\n}\n\nexport const logout = () => {\n    return {\n        type: type.LOGOUT,\n    }\n}","import { combineReducers } from 'redux'\n\nimport { commonReducer } from './modules/common'\nimport { setLoadingStatus } from './modules/common/action';\n\nimport { CommonFunctions } from './entities/CommonFunctions';\nimport { ICommonFunctions } from './entities/interface/ICommonFunctions';\n\nimport { settingReducer } from './modules/setting';\n\n\nexport const reducer = combineReducers({\n    commonReducer,\n    settingReducer,\n});\n\nexport const commonMapDispatchToProps = (dispatch: any): ICommonFunctions => {\n    const commonFunctions = new CommonFunctions();\n    commonFunctions.setLoadingStatus = (isLoading: boolean, title?: string) => {\n        dispatch(setLoadingStatus(isLoading, title))\n    };\n\n    return Object.assign({}, commonFunctions);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\ninterface IProps {\n    location: any;\n}\n\nclass ScrollToTopWithoutRoute extends React.Component<IProps> {\n    componentDidUpdate(prevProps: IProps) {\n        if (this.props.location !== prevProps.location) {\n            window.scrollTo(0, 0);\n        }\n    }\n\n    render() {\n        return this.props.children\n    }\n}\n\nexport const ScrollToTop = withRouter((props: IProps) => <ScrollToTopWithoutRoute {...props} />)","export class Wrapper {\n    static style1 = 'style1';\n    static style2 = 'style2';\n}","export const site = {\n    ref: 'AssistantAppsStream',\n    captchaKey: 'fe066469-a02f-4827-b577-28ebaea300c8',\n    kurt: {\n        fullName: 'Kurt Lourens',\n        nickName: 'Khaoz-Topsy',\n        website: 'https://kurtlourens.com',\n        twitter: 'https://twitter.com/KhaozTopsy',\n        github: 'https://github.com/Khaoz-Topsy',\n    },\n    stream: {\n        twitch: 'https://www.twitch.tv/khaoztopsy',\n    },\n    assistantApps: {\n        name: 'AssistantApps',\n        email: 'mailto:support@assistantapps.com',\n        website: 'https://assistantapps.com',\n        tools: 'https://tools.assistantapps.com',\n        github: 'https://assistantapps.com/github',\n        discord: 'https://assistantapps.com/discord',\n        patreon: 'https://www.patreon.com/AssistantApps',\n    }\n}","/* Auto Generated */\n\nexport enum OAuthProviderType {\n    unknown,\n    google,\n}\n","import classNames from \"classnames\";\nimport { ReactNode } from \"react\";\nimport { site } from \"../../constants/site\";\n\ninterface IProps {\n    href: string;\n    additionalClassNames?: string;\n    children?: ReactNode;\n}\nexport const BasicLink = (props: IProps) => {\n    const appendRef = (baseUrl: string) => {\n        if (baseUrl.includes('@')) return baseUrl;\n        if (baseUrl.includes('?')) {\n            return baseUrl + `&ref=${site.ref}`;\n        }\n        return baseUrl + `?ref=${site.ref}`;\n    };\n\n    return (\n        <a\n            href={appendRef(props.href)}\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            className={classNames(props.additionalClassNames ?? '')}\n            draggable={false}>\n            {props.children}\n        </a>\n    );\n}","import React from \"react\";\nimport { GoogleLoginButton } from \"react-social-login-buttons\";\n\ninterface IProps {\n    disabled: boolean;\n    onClick: () => void;\n}\n\nexport const CustomGoogleLoginButton = (props: IProps) => {\n    const styleObj = {\n        opacity: props.disabled ? '50%' : null,\n    };\n    return (\n        <GoogleLoginButton\n            className=\"social-button\"\n            style={styleObj}\n            onClick={props.onClick}\n        />\n    );\n}","import moment from \"moment\";\nimport State from \"../../state\";\n\nexport const getIsLoading = (state: State): boolean =>\n    state?.commonReducer?.isLoading || false;\n\nexport const getUserGuid = (state: State): string => {\n    if (getIsExpiredUserDetailsDate(state)) return '';\n    const value = state?.commonReducer?.userGuid || '';\n    return value;\n}\n\nexport const getUserProfileUrl = (state: State): string => {\n    if (getIsExpiredUserDetailsDate(state)) return '';\n    const value = state?.commonReducer?.userProfileUrl || '';\n    return value;\n}\n\nexport const getUserName = (state: State): string => {\n    if (getIsExpiredUserDetailsDate(state)) return '';\n    const value = state?.commonReducer?.userName || '';\n    return value;\n}\n\nexport const getIsExpiredUserDetailsDate = (state: State): boolean => {\n    const value = state?.commonReducer?.userDetailsExpiryDate;\n    if (value == null) return true;\n    if (moment().isAfter(value)) return true;\n    return false;\n}","import React, { ReactNode } from 'react';\nimport Modal from 'react-modal';\n\nconst customStyles = {\n    content: {\n        top: '50%',\n        left: '50%',\n        right: 'auto',\n        bottom: 'auto',\n        marginRight: '-50%',\n        minWidth: '35vw',\n        minHeight: '35vh',\n        transform: 'translate(-50%, -50%)',\n    },\n};\n\nModal.setAppElement('#streamAppDialogContainer');\n\ninterface IProps {\n    icon?: ReactNode;\n    isOpen?: boolean;\n    onOpen?: () => void;\n    onClose?: () => void;\n    children?: ReactNode;\n}\n\nexport const BasicDialog: React.FC<IProps> = (props: IProps) => {\n    const [modalIsOpen, setIsOpen] = React.useState(props.isOpen ?? false);\n\n    const openModal = () => {\n        if (props?.onOpen != null) {\n            props.onOpen();\n            return;\n        }\n        setIsOpen(true);\n    }\n\n    const closeModal = () => {\n        if (props?.onClose != null) {\n            props.onClose();\n            return;\n        }\n        setIsOpen(false);\n    }\n\n    const isModalActuallyOpen = props.isOpen === true || modalIsOpen === true;\n    return (\n        <>\n            {\n                props.icon ?? <button onClick={openModal}>Open Modal</button>\n            }\n            <Modal\n                isOpen={isModalActuallyOpen}\n                onRequestClose={closeModal}\n                style={customStyles}\n                contentLabel=\"Example Modal\"\n                preventScroll={true}\n                parentSelector={() => document.getElementById(\"streamAppDialogContainer\") as HTMLElement}\n            >\n                {props.children ?? <div></div>}\n            </Modal>\n        </>\n    );\n}","export enum EmoteButton {\n    none,\n\n    // NMS \n    atlas,\n    sClass,\n    aClass,\n    bClass,\n    cClass,\n    corruptedDrone,\n    expPatchNull,\n    expPatchUnderwater,\n    expPatchUnits,\n    goldenGek,\n    ok,\n    pioneerBadge,\n    pioneerTrophy,\n    seanMindBlown,\n    seanHead,\n    thumbsUp,\n    units,\n    nanites,\n    waveAnomaly,\n    wonder,\n\n    // Satisfactory\n    ficsit,\n    ficsitThumbsUp,\n    ficsitHead,\n    ficsitCoupon,\n\n    // Eddison\n    eddisonLol,\n    eddisonSir,\n    eddisonLifeJacket,\n    eddisonOnCouch,\n\n    // Other\n    amongUs,\n    amongUsDance,\n    bro,\n    bunnyheart,\n    facepalm,\n    fakeNews,\n    hype,\n    kittyGun,\n    pikaWhat,\n    pressF,\n    programming,\n    report,\n    yay,\n    stonks,\n    catHands,\n    cool,\n    coolThinking,\n    no,\n    yes,\n    dancingHamster,\n    dancingPanda,\n}\n","import React from 'react'\nimport Swal from 'sweetalert2';\nimport { connect } from 'react-redux';\nimport { GoogleLogin } from 'react-google-login';\n\nimport { CustomGoogleLoginButton } from '../../common/socialBtn/googleButton';\nimport { OAuthUserViewModel } from '../../../contracts/generated/ViewModel/oAuthUserViewModel';\nimport { OAuthProviderType } from '../../../contracts/generated/Enum/oAuthProviderType';\nimport { mapStateToProps, mapDispatchToProps } from './loginDialog.redux';\nimport { ILoginProps } from '../../../contracts/login';\nimport { BasicDialog } from '../baseDialog';\n\nimport { withServices } from '../../../integration/dependencyInjection';\n\nimport { dependencyInjectionToProps, IExpectedServices } from './loginDialog.dependencyInjection';\n\ninterface IState {\n    isModalOpen: boolean;\n}\n\ninterface IWithoutExpectedServices {\n    isLoading?: boolean;\n    children?: React.ReactNode;\n    hideWhenLoggedIn?: boolean;\n    hideWhenNotLoggedIn?: boolean;\n    colour?: \"grey\" | \"red\" | \"orange\" | \"yellow\" | \"olive\" | \"green\" | \"teal\" | \"blue\" | \"violet\" | \"purple\" | \"pink\" | \"brown\" | \"black\";\n\n    userGuid?: string;\n    userProfileUrl?: string;\n    userName?: string;\n\n    setLoadingStatus?: (isLoading: boolean) => void;\n    login?: (loginData: ILoginProps) => void;\n    logout?: () => void;\n}\n\ninterface IProps extends IExpectedServices, IWithoutExpectedServices { }\n\nexport class LoginDialogUnconnected extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            isModalOpen: false,\n        };\n    }\n\n    toggleModalOpen = () => {\n        this.setState((prevState: IState) => {\n            return {\n                isModalOpen: !prevState.isModalOpen\n            }\n        });\n    }\n\n    responseGoogle = (type: OAuthProviderType) => async (response: any) => {\n        if (response == null ||\n            response.tokenId == null ||\n            response.profileObj == null ||\n            response.accessToken == null ||\n            response.profileObj.email == null ||\n            response.profileObj.imageUrl == null ||\n            response.profileObj.name == null) {\n            this.oAuthLoginFailure({ custom: 'manual failure, response did not have expected values' });\n            return;\n        }\n        this.toggleModalOpen();\n        var apiObj: OAuthUserViewModel = {\n            accessToken: response.accessToken,\n            tokenId: response.tokenId,\n            email: response.profileObj.email,\n            oAuthType: type,\n            profileUrl: response.profileObj.imageUrl,\n            username: response.profileObj.name,\n        }\n\n        var loginResult = await this.props.loginService.loginWithOAuth(apiObj);\n        this.setLoadingStatus(false);\n        if (loginResult.isSuccess && this.props.login) {\n            this.props.login(loginResult.value);\n        }\n    }\n\n    setLoadingStatus = (isLoading: boolean) => {\n        if (this.props.setLoadingStatus) this.props.setLoadingStatus(isLoading);\n    }\n\n    oAuthLoginFailure = (error: any) => {\n        console.warn(error);\n        this.setLoadingStatus(false);\n        this.setState(() => {\n            return {\n                isModalOpen: false\n            }\n        });\n        Swal.fire({\n            title: 'Login error!',\n            text: `Something went wrong and we could not log you in. ${error.details}`,\n            icon: 'error',\n        });\n    }\n\n    oAuthLogout = () => {\n        Swal.fire({\n            title: 'Logout?',\n            text: `Are you sure that you want to logout?`,\n            icon: 'question',\n            allowEnterKey: true,\n            allowEscapeKey: true,\n            showCancelButton: true,\n        }).then((answer: any) => {\n            if (answer.isConfirmed) {\n                if (this.props.logout) this.props.logout();\n            }\n        });\n    }\n\n    render() {\n        const isLoggedIn = (this.props.userGuid != null && this.props.userGuid.length > 5);\n        if (isLoggedIn && this.props.hideWhenLoggedIn) return (<span></span>);\n        if (!isLoggedIn && this.props.hideWhenNotLoggedIn) return (<span></span>);\n\n        const LoginComponent = isLoggedIn\n            ? (\n                <span className=\"nav-link pointer\" onClick={this.oAuthLogout}>\n                    <img className=\"oauth-circle\" src={this.props.userProfileUrl} alt={this.props.userName} />\n                </span>\n            )\n            : (\n                this.props.children != null\n                    ? <div className=\"pointer\" onClick={this.toggleModalOpen}>\n                        {this.props.children}\n                    </div>\n                    : <span className=\"nav-link pointer\" onClick={this.toggleModalOpen}>Login</span>\n            )\n\n        return (\n            <BasicDialog\n                icon={LoginComponent}\n                isOpen={this.state.isModalOpen}\n                onOpen={this.toggleModalOpen}\n                onClose={this.toggleModalOpen}\n            >\n                <>\n                    <h3 className=\"m-0\">AssistantApps Login</h3>\n                    <hr className=\"mt-1\" />\n                    <GoogleLogin\n                        clientId={window.config.googleClientId}\n                        render={renderProps => (\n                            <CustomGoogleLoginButton\n                                disabled={renderProps.disabled ?? false}\n                                onClick={() => {\n                                    this.setLoadingStatus(true);\n                                    renderProps.onClick();\n                                }}\n                            />\n                        )}\n                        buttonText=\"Login\"\n                        onSuccess={this.responseGoogle(OAuthProviderType.google)}\n                        onFailure={this.oAuthLoginFailure}\n                        cookiePolicy={'single_host_origin'}\n                    />\n                </>\n            </BasicDialog>\n        );\n    }\n}\n\nexport const LoginDialog = withServices<IWithoutExpectedServices, IExpectedServices>(\n    connect(mapStateToProps, mapDispatchToProps)(LoginDialogUnconnected),\n    dependencyInjectionToProps\n);","import { State } from '../../../redux/state';\n\nimport { getIsLoading, getUserGuid, getUserName, getUserProfileUrl } from '../../../redux/modules/common/selector';\nimport { login, logout, setLoadingStatus } from '../../../redux/modules/common/action';\nimport { ILoginProps } from '../../../contracts/login';\n\nexport const mapStateToProps = (state: State) => {\n    return {\n        isLoading: getIsLoading(state),\n        userGuid: getUserGuid(state),\n        userProfileUrl: getUserProfileUrl(state),\n        userName: getUserName(state),\n    };\n};\n\nexport const mapDispatchToProps = (dispatch: any) => {\n\n    let newProps: any = {};\n    newProps.setLoadingStatus = (isLoading: boolean) => {\n        dispatch(setLoadingStatus(isLoading));\n    };\n    newProps.login = (loginData: ILoginProps) => {\n        dispatch(login(loginData));\n    };\n    newProps.logout = () => {\n        dispatch(logout());\n    };\n    return { ...newProps };\n}","\nimport { IDependencyInjection } from '../../../integration/dependencyInjection';\nimport { LoginService } from '../../../services/api/LoginService';\n\n\nexport interface IExpectedServices {\n    loginService: LoginService;\n}\n\nexport const dependencyInjectionToProps = (services: IDependencyInjection): IExpectedServices => {\n    const { loginService, } = services;\n    return {\n        loginService,\n    }\n};","import React from 'react';\nimport { site } from '../../constants/site';\nimport { BasicLink } from '../core/link';\nimport { LoginDialog } from '../dialog/login/loginDialog';\n\ninterface IProps {\n    toggleDrawer: () => void;\n}\n\nexport const Header: React.FC<IProps> = (props: IProps) => {\n    return (\n        <header id=\"header\" className=\"hide-on-stream\">\n            <h1>\n                <p>Stream Tools&nbsp;\n                    <span>for <BasicLink href={site.stream.twitch}>{site.kurt.nickName}</BasicLink></span>\n                </p>\n            </h1>\n            <div className=\"menu-item\">\n                <LoginDialog>\n                    <i className=\"icon-user\">&nbsp;</i><span>Login</span>\n                </LoginDialog>\n            </div>\n            <div className=\"menu-item pointer\" onClick={props.toggleDrawer}>\n                <i className=\"icon-menu\">&nbsp;</i><span>Menu</span>\n            </div>\n        </header>\n    );\n}","import React from 'react';\n\nimport './scrollDownIndicator.scss';\n\nexport const ScrollDownArrowsIndicator = () => {\n    return (\n        <div className=\"scroll-down-arrows col-md-0\">\n            <span></span>\n            <span></span>\n            <span></span>\n        </div>\n    );\n}\n\nexport const ScrollDownMouseIndicator = () => {\n    return (\n        <div className=\"scroll-down-mouse col-md-0\"></div>\n    );\n}","import React, { useEffect, useRef } from 'react';\nimport { site } from '../../constants/site';\nimport { BasicLink } from '../core/link';\nimport { ScrollDownArrowsIndicator } from './scroll/scrollDownIndicator';\n\ninterface IProps {\n    videoUrl: string;\n}\n\nexport const Banner: React.FC<IProps> = (props: IProps) => {\n    const videoRef: any = useRef<HTMLVideoElement>();\n    const previousUrl = useRef<string>();\n\n    useEffect(() => {\n        if (previousUrl.current !== props.videoUrl && videoRef.current) {\n            setTimeout(() => {\n                console.log('load video');\n                (videoRef?.current as any).load();\n                previousUrl.current = props.videoUrl;\n            }, 1000);\n        }\n    }, [props.videoUrl]);\n    return (\n        <section id=\"banner\" className=\"margin-top-navbar\" data-video={props.videoUrl}>\n            <div className=\"inner\">\n                <header>\n                    <h1>Stream Tools!</h1>\n                    <p>\n                        This website is a collection of tools for <BasicLink href={site.stream.twitch}>KhaozTopsy</BasicLink> streams<br />\n                        <i>More tools coming soon!</i>&nbsp;🤪\n                    </p>\n                </header>\n                <a href=\"#emote\" className=\"button big alt scrolly\" draggable={false}>Try Emotes 🎉</a>\n            </div>\n            <video ref={videoRef} autoPlay muted loop>\n                <source src={`${props.videoUrl}.mp4`} type=\"video/mp4\" />\n                <source src={`${props.videoUrl}.webm`} type=\"video/webm\" />\n            </video>\n            <ScrollDownArrowsIndicator />\n        </section>\n    );\n}","import classNames from 'classnames';\nimport React from 'react';\nimport { site } from '../../constants/site';\nimport { BasicLink } from '../core/link';\nimport { LoginDialog } from '../dialog/login/loginDialog';\n\ninterface IProps {\n    showDrawer: boolean;\n    toggleDrawer: () => void;\n}\n\nexport const Navbar: React.FC<IProps> = (props: IProps) => {\n    return (\n        <>\n            {\n                props.showDrawer && (\n                    <div className=\"full-page-loader opacity80\" onClick={props.toggleDrawer}></div>\n                )\n            }\n            <nav id=\"menu\" className={classNames('hide-on-stream', { visible: props.showDrawer })}>\n                <ul className=\"links\">\n                    <li className=\"ta-center\"><LoginDialog hideWhenNotLoggedIn={true} /></li>\n                    <li><BasicLink href={site.stream.twitch}>Twitch Channel</BasicLink></li>\n                    <li><BasicLink href={site.assistantApps.website}>{site.assistantApps.name} Website</BasicLink></li>\n                    <li><BasicLink href={site.kurt.github}>Github</BasicLink></li>\n                    <li><BasicLink href={site.assistantApps.patreon}>Patreon</BasicLink></li>\n                    <li><BasicLink href={site.assistantApps.discord}>Discord</BasicLink></li>\n                    <li><BasicLink href={site.kurt.website}>{site.kurt.fullName}</BasicLink></li>\n                </ul>\n                <span className=\"close icon-close\" onClick={props.toggleDrawer}></span>\n            </nav>\n        </>\n    );\n}","import React from 'react';\nimport { site } from '../../constants/site';\nimport { BasicLink } from '../core/link';\n\nimport packageJson from '../../../package.json';\n\ninterface IProps {\n\n}\n\nexport const Footer: React.FC<IProps> = () => {\n    return (\n        <footer id=\"footer\" className=\"hide-on-stream\">\n            <div className=\"inner\">\n                <div className=\"flex flex-3\">\n                    <div className=\"col\">\n                        <h3>{site.kurt.nickName}</h3>\n                        <ul className=\"alt\">\n                            <li><BasicLink href={site.stream.twitch}>Twitch channel</BasicLink></li>\n                            <li><BasicLink href={site.kurt.twitter}>Twitter Profile</BasicLink></li>\n                            <li><BasicLink href={site.kurt.github}>Github Profile</BasicLink></li>\n                            <li><BasicLink href={site.kurt.website}>CV Website</BasicLink></li>\n                        </ul>\n                    </div>\n                    <div className=\"col\">\n                        <h3>{site.assistantApps.name}</h3>\n                        <ul className=\"alt\">\n                            <li><BasicLink href={site.assistantApps.website}>Main Website</BasicLink></li>\n                            <li><BasicLink href={site.assistantApps.tools}>Tools Website</BasicLink></li>\n                            <li><BasicLink href={site.assistantApps.discord}>Discord</BasicLink></li>\n                            <li><BasicLink href={site.assistantApps.github}>Github Organisation</BasicLink></li>\n                            <li><BasicLink href={site.assistantApps.email}>Support Email</BasicLink></li>\n                        </ul>\n                    </div>\n                    <div className=\"col\">\n                        <h3>Other</h3>\n                        <ul className=\"alt\">\n                            <li><BasicLink href=\"https://www.youtube.com/watch?v=dQw4w9WgXcQ\">Don't click this</BasicLink></li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n            <div className=\"copyright\">\n                <ul className=\"icons\">\n                    <li><a href=\"https://google.com\" className=\"icon fa-twitter\"><span className=\"label\">Twitter</span></a></li>\n                    <li><a href=\"https://google.com\" className=\"icon fa-facebook\"><span className=\"label\">Facebook</span></a></li>\n                    <li><a href=\"https://google.com\" className=\"icon fa-instagram\"><span className=\"label\">Instagram</span></a></li>\n                    <li><a href=\"https://google.com\" className=\"icon fa-snapchat\"><span className=\"label\">Snapchat</span></a></li>\n                </ul>\n                <BasicLink href={site.kurt.website}>&copy; {site.kurt.fullName} | {packageJson?.version ?? '1.0.0'}</BasicLink>\n            </div>\n        </footer>\n    );\n}","export const EmoteTag = {\n    default: 'default',\n    nms: 'nms',\n    satisfactory: 'satisfactory',\n    eddison: 'eddison',\n    other: 'other',\n}","import { IStreamEmoteButton } from \"../../contracts/streamEmoteButton\";\nimport { EmoteButton } from './emoteButton';\nimport { EmoteTag } from './emoteTags';\n\nexport const StreamAvailableEmotes: Array<IStreamEmoteButton> = [\n    {\n        id: EmoteButton.sClass,\n        imageUrl: '/assets/img/emotes/nms/classS.png',\n        tags: [EmoteTag.default, EmoteTag.nms],\n        sortOrder: 10,\n    },\n    {\n        id: EmoteButton.aClass,\n        imageUrl: '/assets/img/emotes/nms/classA.png',\n        tags: [EmoteTag.default, EmoteTag.nms],\n        sortOrder: 20,\n    },\n    {\n        id: EmoteButton.ok,\n        imageUrl: '/assets/img/emotes/nms/ok.png',\n        tags: [EmoteTag.default, EmoteTag.nms],\n        sortOrder: 30,\n    },\n    {\n        id: EmoteButton.corruptedDrone,\n        imageUrl: '/assets/img/emotes/nms/corruptedDrone.png',\n        tags: [EmoteTag.default, EmoteTag.nms],\n        sortOrder: 40,\n    },\n    {\n        id: EmoteButton.seanMindBlown,\n        imageUrl: '/assets/img/emotes/nms/seanMindBlown.png',\n        tags: [EmoteTag.default, EmoteTag.nms],\n        sortOrder: 50,\n    },\n    {\n        id: EmoteButton.seanHead,\n        imageUrl: '/assets/img/emotes/nms/seanHead.png',\n        tags: [EmoteTag.default, EmoteTag.nms],\n        sortOrder: 60,\n    },\n    {\n        id: EmoteButton.bunnyheart,\n        imageUrl: '/assets/img/emotes/bunnyheart.png',\n        tags: [EmoteTag.default],\n        sortOrder: 70,\n    },\n    {\n        id: EmoteButton.yay,\n        imageUrl: '/assets/img/emotes/yay.gif',\n        tags: [EmoteTag.other, EmoteTag.default],\n        sortOrder: 100,\n    },\n    {\n        id: EmoteButton.ficsit,\n        imageUrl: '/assets/img/emotes/ficsit.png',\n        tags: [EmoteTag.default, EmoteTag.satisfactory],\n        sortOrder: 80,\n    },\n    {\n        id: EmoteButton.ficsitThumbsUp,\n        imageUrl: '/assets/img/emotes/ficsitThumbsUp.png',\n        tags: [EmoteTag.default, EmoteTag.satisfactory],\n        sortOrder: 90,\n    },\n    {\n        id: EmoteButton.stonks,\n        imageUrl: '/assets/img/emotes/stonks.png',\n        tags: [EmoteTag.default],\n        sortOrder: 110,\n    },\n    {\n        id: EmoteButton.pikaWhat,\n        imageUrl: '/assets/img/emotes/pkawha.png',\n        tags: [EmoteTag.default],\n        sortOrder: 120,\n    },\n    {\n        id: EmoteButton.amongUs,\n        imageUrl: '/assets/img/emotes/amongus.png',\n        tags: [EmoteTag.default],\n        sortOrder: 130,\n    },\n    {\n        id: EmoteButton.amongUsDance,\n        imageUrl: '/assets/img/emotes/amongUsDance.gif',\n        tags: [EmoteTag.default],\n        sortOrder: 140,\n    },\n    {\n        id: EmoteButton.report,\n        imageUrl: '/assets/img/emotes/report.png',\n        tags: [EmoteTag.default],\n        sortOrder: 150,\n    },\n    {\n        id: EmoteButton.facepalm,\n        imageUrl: '/assets/img/emotes/facepalm.png',\n        tags: [EmoteTag.other, EmoteTag.default],\n        sortOrder: 160,\n    },\n    {\n        id: EmoteButton.fakeNews,\n        imageUrl: '/assets/img/emotes/fakeNews.png',\n        tags: [EmoteTag.default],\n        sortOrder: 170,\n    },\n    {\n        id: EmoteButton.bro,\n        imageUrl: '/assets/img/emotes/bro.png',\n        tags: [EmoteTag.default],\n        sortOrder: 180,\n    },\n    {\n        id: EmoteButton.pressF,\n        imageUrl: '/assets/img/emotes/pressF.png',\n        tags: [EmoteTag.default],\n        sortOrder: 190,\n    },\n    {\n        id: EmoteButton.programming,\n        imageUrl: '/assets/img/emotes/programming.gif',\n        tags: [EmoteTag.default],\n        sortOrder: 200,\n    },\n\n    // ----------------- Eddison -----------------\n    {\n        id: EmoteButton.eddisonLol,\n        imageUrl: '/assets/img/emotes/eddisonLol.png',\n        tags: [EmoteTag.other, EmoteTag.eddison],\n        sortOrder: 71,\n    },\n    {\n        id: EmoteButton.eddisonSir,\n        imageUrl: '/assets/img/emotes/eddisonSir.png',\n        tags: [EmoteTag.other, EmoteTag.eddison],\n        sortOrder: 72,\n    },\n    {\n        id: EmoteButton.eddisonLifeJacket,\n        imageUrl: '/assets/img/emotes/eddisonLifeJacket.png',\n        tags: [EmoteTag.other, EmoteTag.eddison],\n        sortOrder: 73,\n    },\n    {\n        id: EmoteButton.eddisonOnCouch,\n        imageUrl: '/assets/img/emotes/eddisonOnCouch.png',\n        tags: [EmoteTag.other, EmoteTag.eddison],\n        sortOrder: 74,\n    },\n\n    // ----------------- NMS -----------------\n    {\n        id: EmoteButton.bClass,\n        imageUrl: '/assets/img/emotes/nms/classB.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 21,\n    },\n    {\n        id: EmoteButton.cClass,\n        imageUrl: '/assets/img/emotes/nms/classC.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 22,\n    },\n    {\n        id: EmoteButton.thumbsUp,\n        imageUrl: '/assets/img/emotes/nms/thumbsUp.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 23,\n    },\n    {\n        id: EmoteButton.expPatchNull,\n        imageUrl: '/assets/img/emotes/nms/expPatchNull.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 24,\n    },\n    {\n        id: EmoteButton.expPatchUnderwater,\n        imageUrl: '/assets/img/emotes/nms/expPatchUnderwater.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 24,\n    },\n    {\n        id: EmoteButton.expPatchUnits,\n        imageUrl: '/assets/img/emotes/nms/expPatchUnits.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 24,\n    },\n    {\n        id: EmoteButton.goldenGek,\n        imageUrl: '/assets/img/emotes/nms/goldenGek.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 24,\n    },\n    {\n        id: EmoteButton.pioneerBadge,\n        imageUrl: '/assets/img/emotes/nms/pioneerBadge.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 24,\n    },\n    {\n        id: EmoteButton.pioneerTrophy,\n        imageUrl: '/assets/img/emotes/nms/pioneerTrophy.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 24,\n    },\n    {\n        id: EmoteButton.units,\n        imageUrl: '/assets/img/emotes/nms/Units.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 29,\n    },\n    {\n        id: EmoteButton.nanites,\n        imageUrl: '/assets/img/emotes/nms/nanites.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 29,\n    },\n    {\n        id: EmoteButton.waveAnomaly,\n        imageUrl: '/assets/img/emotes/nms/waveAnomaly.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 31,\n    },\n    {\n        id: EmoteButton.wonder,\n        imageUrl: '/assets/img/emotes/nms/wonder.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 32,\n    },\n    {\n        id: EmoteButton.atlas,\n        imageUrl: '/assets/img/emotes/nms/atlas.png',\n        tags: [EmoteTag.nms],\n        sortOrder: 41,\n    },\n\n    // ----------------- Satisfactory -----------------\n    {\n        id: EmoteButton.ficsitHead,\n        imageUrl: '/assets/img/emotes/ficsitEngineer.png',\n        tags: [EmoteTag.other, EmoteTag.satisfactory],\n        sortOrder: 91,\n    },\n    {\n        id: EmoteButton.ficsitCoupon,\n        imageUrl: '/assets/img/emotes/ficsitCoupon.png',\n        tags: [EmoteTag.other, EmoteTag.satisfactory],\n        sortOrder: 92,\n    },\n\n    // ----------------- Other -----------------\n    {\n        id: EmoteButton.catHands,\n        imageUrl: '/assets/img/emotes/catHands.png',\n        tags: [EmoteTag.other],\n        sortOrder: 75,\n    },\n    {\n        id: EmoteButton.cool,\n        imageUrl: '/assets/img/emotes/cool.png',\n        tags: [EmoteTag.other],\n        sortOrder: 111,\n    },\n    {\n        id: EmoteButton.coolThinking,\n        imageUrl: '/assets/img/emotes/coolThinking.png',\n        tags: [EmoteTag.other],\n        sortOrder: 112,\n    },\n    {\n        id: EmoteButton.yes,\n        imageUrl: '/assets/img/emotes/yes.png',\n        tags: [EmoteTag.other],\n        sortOrder: 113,\n    },\n    {\n        id: EmoteButton.no,\n        imageUrl: '/assets/img/emotes/no.png',\n        tags: [EmoteTag.other],\n        sortOrder: 114,\n    },\n    {\n        id: EmoteButton.hype,\n        imageUrl: '/assets/img/emotes/hype.png',\n        tags: [EmoteTag.other],\n        sortOrder: 200,\n    },\n    {\n        id: EmoteButton.kittyGun,\n        imageUrl: '/assets/img/emotes/kittyGun.png',\n        tags: [EmoteTag.other],\n        sortOrder: 201,\n    },\n    {\n        id: EmoteButton.dancingHamster,\n        imageUrl: '/assets/img/emotes/dancingHamster.gif',\n        tags: [EmoteTag.other],\n        sortOrder: 202,\n    },\n    {\n        id: EmoteButton.dancingPanda,\n        imageUrl: '/assets/img/emotes/dancingPanda.gif',\n        tags: [EmoteTag.other],\n        sortOrder: 203,\n    },\n]\n\n\n\nexport const StreamAvailableEmotesForDash: Array<IStreamEmoteButton> = StreamAvailableEmotes.filter(sae => sae.tags.includes(EmoteTag.default))\n\n\n\n\n\n\n\n\n\n\n\n\n","const dayjs = require('dayjs');\n\nexport const formatDate = (date: Date) => {\n    return dayjs(date).format('YYYY/MM/DD');\n}\n\nexport const addMinutes = (date: Date, minutes: number): Date => {\n    return dayjs(date).add(minutes, 'minute');\n}\n\nexport const addSeconds = (date: Date, seconds: number): Date => {\n    return dayjs(date).add(seconds, 'second');\n}\n\nexport const addMilliseconds = (date: Date, milliseconds: number): Date => {\n    return dayjs(date).add(milliseconds, 'millisecond');\n}","import React from \"react\";\n\ninterface IProps {\n    alt?: string;\n    imageUrl: string;\n    imageName?: string;\n    classNames?: string;\n}\nexport const BasicImage: React.FC<IProps> = (props: IProps) => {\n    return (\n        <img src={props.imageUrl} className={props.classNames} alt={(props.alt ?? props.imageName) ?? 'Emote button'} draggable={false} />\n    );\n}","import React from 'react';\nimport { BasicImage } from '../../components/core/image';\nimport { StreamAvailableEmotes } from '../../constants/emote/streamEmotes';\nimport { EmoteButton } from '../../constants/emote/emoteButton';\n\nimport './streamEmoteButton.scss';\n\nexport interface IProps {\n    emoteId: EmoteButton;\n    message?: string;\n}\n\nexport const StreamEmoteButtonIcon: React.FC<IProps> = (props: IProps) => {\n    const emote = StreamAvailableEmotes.find(ae => ae.id === props.emoteId)\n    if (emote == null) {\n        return <span></span>\n    }\n\n    return (\n        <>\n            <BasicImage\n                classNames=\"tiny-img\"\n                {...emote}\n            />\n            {\n                props.message != null &&\n                <span>&nbsp;&nbsp;{props.message}</span>\n            }\n        </>\n    );\n}","import Swal from 'sweetalert2';\n\nimport { StreamEmoteButtonIcon } from '../../components/streamEmotes/streamEmoteButtonIcon';\nimport { EmoteButton } from '../../constants/emote/emoteButton';\nimport { ToastService } from '../../services/common/toast/toastService';\n\nexport const warningSpamSingleEmoji = () =>\n    Swal.fire({\n        icon: 'warning',\n        title: 'Woah!',\n        text: 'I think we all get the point, please don\\'t spam a single emoji 😅',\n        allowOutsideClick: false,\n    });\n\nexport const warningRateLimitFromServer = () =>\n    Swal.fire({\n        icon: 'warning',\n        title: 'Too Many!',\n        text: 'You have submitted too many emojis, please slow down 😅',\n        allowOutsideClick: false,\n    });\n\nexport const successEmoteSubmitted = (toastService: ToastService, newSelectedEmote: EmoteButton) =>\n    toastService.success(\n        <StreamEmoteButtonIcon\n            emoteId={newSelectedEmote}\n            message=\"was submitted successfully\"\n        />\n    );\n\n\nexport const errorEmoteNotSubmitted = (toastService: ToastService, newSelectedEmote: EmoteButton) =>\n    toastService.error(\n        <StreamEmoteButtonIcon\n            emoteId={newSelectedEmote}\n            message=\"was not submitted\"\n        />\n    );\n\nexport const warningSpamShowLeaderboard = () =>\n    Swal.fire({\n        icon: 'warning',\n        title: 'Woah!',\n        text: 'I think we all get the point, please don\\'t spam the show leaderboard button 😅',\n        allowOutsideClick: false,\n    });","import React from 'react';\nimport classNames from 'classnames';\nimport { BasicImage } from '../../components/core/image';\nimport { EmoteButton } from '../../constants/emote/emoteButton';\nimport { IStreamEmoteButton } from '../../contracts/streamEmoteButton';\n\nimport './streamEmoteButton.scss';\n\nexport interface IProps extends IStreamEmoteButton {\n    isActive: boolean;\n    onClick: (id: EmoteButton) => void;\n}\n\nexport const StreamEmoteButton: React.FC<IProps> = (props: IProps) => {\n    return (\n        <div className={classNames('video col pointer noselect', { active: props.isActive })}\n            onClick={() => props.onClick(props.id)}\n        >\n            <div className=\"image fit emote noselect\">\n                <BasicImage {...props} />\n            </div>\n        </div>\n    );\n}","import { Button, ButtonGroup } from '@material-ui/core';\nimport classNames from 'classnames';\nimport React from 'react';\nimport { EmoteTag } from '../../constants/emote/emoteTags';\nimport { EmoteButton } from '../../constants/emote/emoteButton';\nimport { IStreamEmoteButton } from '../../contracts/streamEmoteButton';\nimport { StreamEmoteButton } from './streamEmoteButton';\n\nexport interface ISelectedEmoteMeta {\n    selectedEmote: EmoteButton;\n    expiryDate: Date;\n}\n\ninterface IProps {\n    receivedEmotes: Array<ISelectedEmoteMeta>;\n    availableEmotes: Array<IStreamEmoteButton>;\n    setCurrentEmote: (newSelectedEmote: EmoteButton) => void;\n\n    selectedSectionIndex: number;\n    onSectionClick: (newSelectedSectionIndex: number) => void;\n\n    onShowLeaderboardClick: () => void;\n}\n\nexport const StreamEmotePresenter: React.FC<IProps> = (props: IProps) => {\n\n    const buttonArray = [\n        {\n            title: 'Default',\n            image: '/assets/img/emotes/facepalm.png',\n            tagContains: [EmoteTag.default],\n        },\n        {\n            title: 'No Man\\'s Sky',\n            image: '/assets/img/emotes/nms/classS.png',\n            tagContains: [EmoteTag.nms],\n        },\n        {\n            title: 'Eddison',\n            image: '/assets/img/emotes/eddisonSir.png',\n            tagContains: [EmoteTag.eddison],\n        },\n        {\n            title: 'Other',\n            image: '/assets/img/emotes/kittyGun.png',\n            tagContains: [EmoteTag.satisfactory, EmoteTag.other],\n        }\n    ];\n\n    const tagContains = buttonArray[props.selectedSectionIndex]?.tagContains ?? [];\n    const availableEmotes = (props.availableEmotes || []).filter(ae => ae.tags.some(t => tagContains.indexOf(t) >= 0))\n\n    return (\n        <div className=\"row\">\n            <div className=\"group-selection ta-center\">\n                <ButtonGroup className=\"lg\" color=\"primary\" aria-label=\"outlined primary button group\">\n                    {\n                        buttonArray.map((button: any, index: number) => {\n                            return (\n                                <Button\n                                    key={button.title}\n                                    className={classNames({ 'active': index === props.selectedSectionIndex })}\n                                    onClick={() => props.onSectionClick?.(index)}\n                                >{button.title}</Button>\n                            )\n                        })\n                    }\n                </ButtonGroup>\n                <ButtonGroup className=\"sm\" color=\"primary\" aria-label=\"outlined primary button group\">\n                    {\n                        buttonArray.map((button: any, index: number) => {\n                            return (\n                                <Button\n                                    key={button.title}\n                                    className={classNames({ 'active': index === props.selectedSectionIndex })}\n                                    onClick={() => props.onSectionClick?.(index)}\n                                ><img src={button.image} className=\"sm-img\" alt={button.title} /></Button>\n                            )\n                        })\n                    }\n                </ButtonGroup>\n                <ButtonGroup className=\"xs\" color=\"primary\" aria-label=\"outlined primary button group\">\n                    {\n                        buttonArray.map((button: any, index: number) => {\n                            return (\n                                <Button\n                                    key={button.title}\n                                    className={classNames({ 'active': index === props.selectedSectionIndex })}\n                                    onClick={() => props.onSectionClick?.(index)}\n                                ><img src={button.image} className=\"xs-img\" alt={button.title} /></Button>\n                            )\n                        })\n                    }\n                </ButtonGroup>\n            </div>\n            <div style={{ width: '100%' }} className=\"ta-center\">\n                <div className=\"flex flex-tabs\">\n                    <div className=\"tab tab-1 emote-flex flex flex-5 active\" style={{ width: '100%' }}>\n                        {\n                            availableEmotes.map((item: IStreamEmoteButton, index: number) => {\n                                return (\n                                    <StreamEmoteButton\n                                        key={`${index}-${item.id}`}\n                                        {...item}\n                                        isActive={props.receivedEmotes.findIndex(re => {\n                                            if (re.expiryDate < new Date()) return false;\n                                            return re.selectedEmote === item.id;\n                                        }) >= 0}\n                                        onClick={props.setCurrentEmote}\n                                    />\n                                )\n                            })\n                        }\n                    </div>\n                </div>\n                <button className=\"button big alt\" onClick={props.onShowLeaderboardClick}>\n                    <img\n                        src=\"/assets/img/cup.svg\"\n                        draggable=\"false\"\n                        alt=\"cup\"\n                        style={{ verticalAlign: 'middle', marginRight: '0.5em', height: '30px' }}\n                    />\n                    <span>Show Leaderboard on stream</span>\n                </button>\n            </div>\n        </div>\n    );\n}","import React from 'react';\nimport { EmoteButton } from '../../constants/emote/emoteButton';\nimport { IStreamEmoteButton } from '../../contracts/streamEmoteButton';\nimport { EmoteClient } from '../../services/common/signal/EmoteClient';\nimport { ISelectedEmoteMeta, StreamEmotePresenter } from './streamEmotePresenter';\n\nexport type { ISelectedEmoteMeta } from './streamEmotePresenter';\n\ninterface IProps {\n    emoteClient: EmoteClient;\n    receivedEmotes: Array<ISelectedEmoteMeta>;\n    availableEmotes: Array<IStreamEmoteButton>;\n    setCurrentEmote: (newSelectedEmote: EmoteButton) => void;\n    onShowLeaderboardClick: () => void;\n}\n\ninterface IState {\n    selectedSectionIndex: number;\n}\n\nexport class StreamEmoteContainer extends React.Component<IProps, IState> {\n    captchaRef = React.createRef<any>();\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedSectionIndex: 0,\n        };\n    }\n\n    onSectionClick = (newSelectedSectionIndex: number) => {\n        this.setState(() => {\n            return {\n                selectedSectionIndex: newSelectedSectionIndex,\n            }\n        })\n    }\n\n    render() {\n        return (\n            <StreamEmotePresenter\n                {...this.state}\n                {...this.props}\n                onSectionClick={this.onSectionClick}\n                onShowLeaderboardClick={this.props.onShowLeaderboardClick}\n            />\n        );\n    }\n}","import React from 'react';\nimport { connect } from 'react-redux';\nimport HCaptcha from '@hcaptcha/react-hcaptcha';\n\nimport { site } from '../../constants/site';\nimport { numberOfSameEmotePerMinuteAllowed } from '../../constants/emote/emoteConstraints';\nimport { StreamAvailableEmotes } from '../../constants/emote/streamEmotes';\nimport { EmoteButton } from '../../constants/emote/emoteButton';\nimport { withServices } from '../../integration/dependencyInjection';\nimport { LoginDialog } from '../dialog/login/loginDialog';\nimport { addMilliseconds, addMinutes } from '../../helper/dateHelper';\n\nimport { errorEmoteNotSubmitted, successEmoteSubmitted, warningRateLimitFromServer, warningSpamShowLeaderboard, warningSpamSingleEmoji } from './streamEmoteComponents';\nimport { ISelectedEmoteMeta, StreamEmoteContainer } from './streamEmoteContainer';\nimport { mapDispatchToProps, mapStateToProps } from './streamEmote.Redux';\nimport { dependencyInjectionToProps, IExpectedServices } from './streamEmote.dependencyInjection';\n\ninterface IWithoutExpectedServices {\n    wrapperClass: string;\n}\n\ninterface IFromRedux {\n    userGuid: string;\n    userProfileUrl: string;\n    userName: string;\n}\n\ninterface IProps extends IExpectedServices, IWithoutExpectedServices, IFromRedux { }\n\ninterface IState {\n    selectedEmote: EmoteButton;\n    receivedEmotes: Array<ISelectedEmoteMeta>;\n    emotesHistory: Array<ISelectedEmoteMeta>;\n    showLeaderboardHistory: Array<Date>;\n}\n\nexport class StreamEmoteUnconnected extends React.Component<IProps, IState> {\n    captchaRef = React.createRef<any>();\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedEmote: EmoteButton.none,\n            receivedEmotes: [],\n            emotesHistory: [],\n            showLeaderboardHistory: [],\n        };\n    }\n\n    isLoggedIn = (localProps: IProps) => (localProps.userGuid != null && localProps.userGuid.length > 5);\n\n    componentDidMount() {\n        this.props.emoteClient.listenToEmote(this.receiveSelectedEmote);\n    }\n\n    componentWillUnmount() {\n        this.props.emoteClient.removeListenToEmote(this.receiveSelectedEmote);\n    }\n\n    getValidEmotes = (emotesList: Array<ISelectedEmoteMeta>): Array<ISelectedEmoteMeta> => {\n        return emotesList.filter((item: ISelectedEmoteMeta) => {\n            return item.expiryDate > new Date();\n        })\n    }\n\n    receiveSelectedEmote = (newEmote: EmoteButton) => {\n        this.setState((prevState: IState) => {\n            const newItem: ISelectedEmoteMeta = {\n                selectedEmote: newEmote,\n                expiryDate: addMilliseconds(new Date(), 500),\n            }\n            const validEmotes = this.getValidEmotes(prevState.receivedEmotes)\n            return {\n                receivedEmotes: [...validEmotes, newItem]\n            }\n        });\n\n        setTimeout(() => {\n            this.setState((prevState: IState) => {\n                return {\n                    receivedEmotes: this.getValidEmotes(prevState.receivedEmotes)\n                }\n            })\n        }, 500);\n    }\n\n    setCurrentEmote = async (newSelectedEmote: EmoteButton) => {\n        const validHistory = this.getValidEmotes(this.state.emotesHistory);\n        if (validHistory.filter(vh => vh.selectedEmote === newSelectedEmote).length > numberOfSameEmotePerMinuteAllowed) {\n            warningSpamSingleEmoji()\n            return;\n        }\n\n        this.setState(() => {\n            return {\n                selectedEmote: newSelectedEmote,\n            }\n        });\n\n        if (!this.isLoggedIn(this.props)) {\n            (this.captchaRef?.current as any)?.execute();\n            return;\n        }\n\n        var submitEmoteResult = await this.props.streamService.emoteWithLogin({\n            emote: newSelectedEmote,\n            captcha: '',\n        });\n        if (submitEmoteResult.isSuccess) {\n            successEmoteSubmitted(this.props.toastService, newSelectedEmote);\n            this.setState((prevState: IState) => {\n                return {\n                    emotesHistory: [...prevState.emotesHistory, {\n                        selectedEmote: newSelectedEmote,\n                        expiryDate: addMinutes(new Date(), 1),\n                    }],\n                }\n            });\n            return;\n        }\n\n        if (submitEmoteResult.statusCode === 429) {\n            warningRateLimitFromServer();\n            return;\n        }\n\n        errorEmoteNotSubmitted(this.props.toastService, newSelectedEmote);\n    }\n\n    onShowLeaderboardClick = () => {\n        const validShowHistory = this.state.showLeaderboardHistory.filter((item: Date) => {\n            return item > new Date();\n        });\n\n        if (validShowHistory.length > 1) {\n            warningSpamShowLeaderboard()\n            return;\n        }\n\n        this.setState((prevState: IState) => {\n            return {\n                showLeaderboardHistory: [...prevState.showLeaderboardHistory, addMinutes(new Date(), 1),]\n            }\n        }, this.props.emoteClient.sendShowLeaderboard);\n    }\n\n    render() {\n        const availableEmotes = StreamAvailableEmotes.sort((a, b) => a.sortOrder - b.sortOrder);\n        const isLoggedIn = (this.props.userGuid != null && this.props.userGuid.length > 5);\n        return (\n            <section id=\"emote\" className={`wrapper ${this.props.wrapperClass}`}>\n                <div className=\"inner\">\n                    <header>\n                        <h2>Stream emotes 🎉</h2>\n                        <p>\n                            From here you can interact with the stream by clicking these emotes:\n                            {\n                                !isLoggedIn &&\n                                <>\n                                    <br />Login to skip completing the captcha on every\n                                </>\n                            }\n                        </p>\n                    </header>\n                    <StreamEmoteContainer\n                        receivedEmotes={this.state.receivedEmotes}\n                        availableEmotes={availableEmotes}\n                        setCurrentEmote={this.setCurrentEmote}\n                        onShowLeaderboardClick={this.onShowLeaderboardClick}\n                        emoteClient={this.props.emoteClient}\n                    />\n                    <HCaptcha\n                        ref={this.captchaRef}\n                        sitekey={site.captchaKey}\n                        theme=\"dark\"\n                        size=\"invisible\"\n                        onVerify={(token: string) => {\n                            const { selectedEmote } = this.state;\n                            this.props.streamService.emoteWithCaptcha({\n                                emote: selectedEmote,\n                                captcha: token,\n                            });\n                            (this.captchaRef?.current as any)?.resetCaptcha();\n                        }}\n                    />\n                    <span id=\"login-top-right\" className=\"pos-top-right ta-center\">\n                        <LoginDialog hideWhenLoggedIn={true}>\n                            <i className=\"icon-user font-2\"></i><br />\n                            <span>Login</span>\n                        </LoginDialog>\n                    </span>\n                </div>\n            </section>\n        );\n    }\n}\n\nexport const StreamEmote = withServices<IWithoutExpectedServices, IExpectedServices>(\n    connect(mapStateToProps, mapDispatchToProps)(StreamEmoteUnconnected),\n    dependencyInjectionToProps\n);\n","export const emoteDurationInSeconds = 15;\nexport const numberOfSameEmotePerMinuteAllowed = 5;\nexport const numberOfUsersOnLeaderboard = 5;\nexport const secondsBetweenLeaderboardDisplay = 60;\nexport const secondsLeaderboardDisplaysFor = 10;","import { State } from '../../redux/state';\n\nimport { getUserGuid, getUserName, getUserProfileUrl } from '../../redux/modules/common/selector';\n\nexport const mapStateToProps = (state: State) => {\n    return {\n        userGuid: getUserGuid(state),\n        userProfileUrl: getUserProfileUrl(state),\n        userName: getUserName(state),\n    };\n};\n\nexport const mapDispatchToProps = (dispatch: any) => {\n\n    let newProps: any = {};\n    return { ...newProps };\n}","\nimport { IDependencyInjection } from '../../integration/dependencyInjection';\nimport { StreamService } from '../../services/api/StreamService';\nimport { EmoteClient } from '../../services/common/signal/EmoteClient';\nimport { ToastService } from '../../services/common/toast/toastService';\nimport { TwitchAuthenticationService } from '../../services/twitch/TwitchAuthenticationService';\n\nexport interface IExpectedServices {\n    emoteClient: EmoteClient;\n    twitchAuthService: TwitchAuthenticationService;\n    streamService: StreamService;\n    toastService: ToastService;\n}\n\nexport const dependencyInjectionToProps = (services: IDependencyInjection): IExpectedServices => {\n    const { emoteClient, twitchAuthService, streamService, toastService, } = services;\n    return {\n        emoteClient,\n        twitchAuthService,\n        streamService,\n        toastService,\n    }\n};","import classNames from 'classnames';\nimport React, { ReactNode } from 'react';\nimport { BasicLink } from './core/link';\n\ninterface IVideoColumnItem {\n    image: string;\n    text: string;\n    link?: string;\n    onClick?: () => void;\n}\n\ninterface IProps {\n    wrapperClass: string;\n    title: string;\n    subtitleComponent: ReactNode;\n    flexClass?: string;\n    items: Array<IVideoColumnItem>;\n}\n\nexport const VideoColumnSection: React.FC<IProps> = (props: IProps) => {\n    return (\n        <section className={`wrapper ${props.wrapperClass}`}>\n            <div className=\"inner\">\n                <header className=\"align-center\">\n                    <h2>{props.title}</h2>\n                    {props.subtitleComponent}\n                </header>\n\n                <div className={classNames('flex', props.flexClass ?? 'flex-2')}>\n                    {\n                        props.items.map((item: IVideoColumnItem) => {\n                            const content = (\n                                <>\n                                    <div className=\"image fit\">\n                                        <img src={item.image} alt={item.text} />\n                                    </div>\n                                    <p className=\"caption\">{item.text}</p>\n                                </>\n                            );\n                            if (item.link != null) {\n                                return (\n                                    <BasicLink key={item.image} href={item.link} additionalClassNames=\"video col\">\n                                        {content}\n                                    </BasicLink>\n                                );\n                            }\n                            return (\n                                <div key={item.image} className=\"video col pointer\" onClick={() => item.onClick?.()}>\n                                    {content}\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n            </div>\n        </section>\n    );\n}\n","import React, { useState } from 'react';\n\nimport { Wrapper } from '../constants/wrapperStyleType';\nimport { Header } from '../components/common/header';\nimport { Banner } from '../components/common/banner';\nimport { Navbar } from '../components/common/navbar';\nimport { Footer } from '../components/common/footer';\nimport { StreamEmote } from '../components/streamEmotes/streamEmote';\nimport { VideoColumnSection } from '../components/videoColumnSection';\nimport { site } from '../constants/site';\nimport { BasicLink } from '../components/core/link';\n\nexport const HomePage: React.FC = () => {\n\tconst [showDrawer, setShowDrawer] = useState(false);\n\treturn (\n\t\t<>\n\t\t\t<Header\n\t\t\t\ttoggleDrawer={() => setShowDrawer(!showDrawer)}\n\t\t\t/>\n\t\t\t<Navbar\n\t\t\t\tshowDrawer={showDrawer}\n\t\t\t\ttoggleDrawer={() => setShowDrawer(!showDrawer)}\n\t\t\t/>\n\t\t\t<Banner videoUrl=\"/assets/vid/banner\" />\n\t\t\t<div id=\"main\">\n\t\t\t\t<StreamEmote wrapperClass={Wrapper.style2} />\n\t\t\t\t<VideoColumnSection\n\t\t\t\t\ttitle=\"More content\"\n\t\t\t\t\tsubtitleComponent={<p>Other content from <BasicLink href={site.stream.twitch}>KhaozTopsy</BasicLink> (<BasicLink href={site.assistantApps.website}>AssistantApps</BasicLink>)</p>}\n\t\t\t\t\twrapperClass={Wrapper.style1}\n\t\t\t\t\tflexClass=\"flex-3\"\n\t\t\t\t\titems={[\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timage: '/assets/img/moreContent/streamEmotesBlog.png',\n\t\t\t\t\t\t\ttext: 'Blog post on how & why this website was built, without getting too technical.',\n\t\t\t\t\t\t\tlink: 'https://blog.kurtlourens.com/stream-emojis-build-it-yourself/',\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timage: '/assets/img/moreContent/patreonExclusive.png',\n\t\t\t\t\t\t\ttext: 'Our Patreon page, If you can help me create more software please consider.',\n\t\t\t\t\t\t\tlink: site.assistantApps.patreon,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\timage: '/assets/img/moreContent/assistantAppsMeta.jpeg',\n\t\t\t\t\t\t\ttext: 'Home page of the AssistantApps, all the currently available apps are listed here!',\n\t\t\t\t\t\t\tlink: site.assistantApps.website,\n\t\t\t\t\t\t}\n\t\t\t\t\t]}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<Footer />\n\t\t</>\n\t);\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { LeaderboardUser } from '../../contracts/leaderboardUser';\n\nimport './leaderboard.scss';\n\nexport interface IProps {\n    title: string;\n    rankings: Array<LeaderboardUser>;\n    numberOfUsersOnLeaderboard: number\n    showLeaderboard?: boolean;\n}\n\nexport const Leaderboard: React.FC<IProps> = (props: IProps) => {\n    let rankings: Array<LeaderboardUser> = [];\n    if (props.rankings && props.rankings.length > 0) {\n        rankings = props.rankings\n            .sort((a, b) => b.score - a.score)\n            .slice(0, props.numberOfUsersOnLeaderboard);\n    }\n\n    if (rankings.length < 1) {\n        console.warn('No Leaderboard users!');\n        return (<div className=\"leaderboard\"></div>);\n    }\n\n    return (\n        <div className={classNames('leaderboard', { show: props.showLeaderboard ?? false })}>\n            <h1>\n                <img\n                    src=\"/assets/img/cup.svg\"\n                    draggable=\"false\"\n                    alt=\"cup\"\n                    style={{ verticalAlign: 'middle', marginRight: '0.5em' }}\n                />\n                {props.title}\n            </h1>\n            <ol>\n                {\n                    rankings.map((item: LeaderboardUser) => {\n                        return (\n                            <li key={item.id}>\n                                <mark>{item.name}</mark>\n                                <small>{item.score}</small>\n                            </li>\n                        );\n                    })\n                }\n            </ol>\n        </div>\n    );\n}\n","export const MajorAnimationDurationTypes = [\n    'anim-sec-10',\n    'anim-sec-20',\n    'anim-sec-30',\n]\n\nexport const MinorAnimationDurationTypes = [\n    'anim-sec-1',\n    'anim-sec-2',\n    'anim-sec-3',\n    'anim-sec-4',\n]","export const MajorAnimationTypes = [\n    'snowflake',\n    'fly-x',\n    'fly-x-reverse',\n    'dvd',\n    'dvd-reverse',\n];\n\nexport const MajorAnimationVariationTypes = [\n    'type-0',\n    'type-1',\n    'type-2',\n    'type-3',\n    'type-4',\n    'type-5',\n    'type-6',\n    'type-7',\n    'type-8',\n    'type-9',\n];","const BaseMinorAnimationTypes = [\n    'sway-x',\n    'sway-y',\n    'shake',\n    'pulse',\n    'spin',\n];\n\nconst commonMinorAnimationTypes = [\n    'sway-x',\n    'sway-y',\n    'shake',\n    'spin',\n];\n\nexport const MinorAnimationTypes = [\n    // 'none',\n    ...BaseMinorAnimationTypes,\n    ...commonMinorAnimationTypes,\n    ...commonMinorAnimationTypes,\n]","const RiggedDie = require('gamblers-dice')\n\nexport const getNewDieInstance = (max: number = 10) => {\n    return new RiggedDie(max);\n}\n\nexport const riggedRoll = <T>(riggedDie: any, possibleOptions: Array<T>) => {\n    var rollResult = riggedDie.roll();\n    return possibleOptions[rollResult - 1];\n}","import React, { ReactNode } from 'react';\nimport classNames from 'classnames';\n\nimport { BasicImage } from '../../components/core/image';\nimport { Leaderboard } from '../../components/leaderboard/leaderboard';\nimport { MajorAnimationDurationTypes, MinorAnimationDurationTypes } from '../../constants/emote/animationDurationTypes';\nimport { MajorAnimationTypes, MajorAnimationVariationTypes } from '../../constants/emote/majorAnimationTypes';\nimport { MinorAnimationTypes } from '../../constants/emote/minorAnimationTypes';\nimport { StreamAvailableEmotes, StreamAvailableEmotesForDash } from '../../constants/emote/streamEmotes';\nimport { emoteDurationInSeconds, numberOfUsersOnLeaderboard, secondsBetweenLeaderboardDisplay, secondsLeaderboardDisplaysFor } from '../../constants/emote/emoteConstraints';\nimport { EmoteButton } from '../../constants/emote/emoteButton';\nimport { StreamEmoteFromUserViewModel } from '../../contracts/generated/ViewModel/Emote/streamEmoteFromUserViewModel';\nimport { IStreamEmoteButton } from '../../contracts/streamEmoteButton';\nimport { LeaderboardUser } from '../../contracts/leaderboardUser';\n\nimport { addSeconds } from '../../helper/dateHelper';\nimport { getNewDieInstance, riggedRoll } from '../../helper/randomHelper';\n\nimport { withServices } from '../../integration/dependencyInjection';\n\nimport { dependencyInjectionToProps, IExpectedServices } from './dashboard.dependencyInjection';\nimport moment from 'moment';\n\ninterface IWithoutExpectedServices {\n    wrapperClass: string;\n}\n\ninterface IProps extends IExpectedServices, IWithoutExpectedServices { }\n\ninterface ISelectedEmoteMeta {\n    selectedEmote: EmoteButton;\n\n    // Major\n    majorAnimClass: string;\n    majorAnimDurClass: string;\n    majorAnimVariantClass: string;\n\n    // Minor\n    minorAnimClass: string;\n    minorAnimDurClass: string;\n\n    expiryDate: Date;\n}\n\ninterface IState {\n    intervalId?: NodeJS.Timeout;\n    selectedEmotes: Array<ISelectedEmoteMeta>;\n\n    showLeaderboard: boolean;\n    showLeaderboardDate: Date;\n    leaderboardUsers: Array<LeaderboardUser>;\n\n    randomEmoteDice: any;\n\n    majorAnimationDice: any;\n    majorAnimationDurationDice: any;\n    majorAnimationVariationDice: any;\n\n    minorAnimationDice: any;\n    minorAnimationDurationDice: any;\n}\n\nexport class DashboardPageUnconnected extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            intervalId: undefined,\n            selectedEmotes: [],\n\n            showLeaderboard: true,\n            showLeaderboardDate: new Date(),\n            leaderboardUsers: [],\n\n            randomEmoteDice: getNewDieInstance(StreamAvailableEmotesForDash.length),\n\n            majorAnimationDice: getNewDieInstance(MajorAnimationTypes.length),\n            majorAnimationDurationDice: getNewDieInstance(MajorAnimationDurationTypes.length),\n            majorAnimationVariationDice: getNewDieInstance(MajorAnimationVariationTypes.length),\n\n            minorAnimationDice: getNewDieInstance(MinorAnimationTypes.length),\n            minorAnimationDurationDice: getNewDieInstance(MinorAnimationDurationTypes.length),\n        };\n    }\n\n    componentDidMount() {\n        this.props.emoteClient.listenToEmote(this.setSelectedEmote);\n        this.props.emoteClient.listenToShowLeaderboard(this.userSubmittedShowLeaderboard);\n\n        var intervalId = setInterval(this.timer, 5000);\n        this.setState(() => ({ intervalId }));\n    }\n\n    componentWillUnmount() {\n        this.props.emoteClient.removeListenToEmote(this.setSelectedEmote);\n        this.props.emoteClient.removeListenShowLeaderboard(this.userSubmittedShowLeaderboard);\n        if (this.state.intervalId) clearInterval(this.state.intervalId);\n    }\n\n    timer = () => {\n        const validEmotes = this.getValidEmotes(this.state);\n        const leaderboardDetailsFunc = (prevState: IState) => {\n            const showLeaderboardDate = this.getLeaderboardDate(prevState);\n            return {\n                showLeaderboard: moment(showLeaderboardDate).isBefore(moment()),\n                showLeaderboardDate: showLeaderboardDate,\n            }\n        }\n\n        if (validEmotes.length > 0) {\n            this.setState((prevState: IState) => {\n                return leaderboardDetailsFunc(prevState)\n            });\n        }\n        else {\n            const randomEmote = riggedRoll<IStreamEmoteButton>(this.state.randomEmoteDice, StreamAvailableEmotesForDash);\n            const newStateManipulate = this.manipulateStateOnSelectedEmote({ emoteId: randomEmote.id } as any);\n\n            this.setState((prevState: IState) => {\n                const newState = newStateManipulate(prevState);\n                return {\n                    ...newState,\n                    ...leaderboardDetailsFunc(prevState),\n                }\n            });\n        }\n    }\n\n    addToLeaderboard = (prevState: IState, newEmoteViewModel: StreamEmoteFromUserViewModel): Array<LeaderboardUser> => {\n        let newLeaderboard = [...prevState.leaderboardUsers];\n        if (newEmoteViewModel.userId == null) return newLeaderboard;\n\n        const currentUserIndex = newLeaderboard.findIndex(l => l.id === newEmoteViewModel.userId)\n        if (currentUserIndex < 0) { // Add user\n            newLeaderboard.push({\n                id: newEmoteViewModel.userId,\n                name: newEmoteViewModel.username,\n                score: 1,\n            })\n            return newLeaderboard;\n        }\n\n        const currentUser = { ...newLeaderboard[currentUserIndex] };\n        currentUser.score += 1;\n\n        return [\n            ...newLeaderboard.slice(0, currentUserIndex),\n            currentUser,\n            ...newLeaderboard.slice(currentUserIndex + 1)\n        ];\n    }\n\n    getLeaderboardDate = (prevState: IState): Date => {\n        const futureDate = moment(prevState.showLeaderboardDate).add(secondsLeaderboardDisplaysFor, 'seconds');\n        const currentDate = moment();\n\n        if (futureDate.isBefore(currentDate)) {\n            return currentDate.add(secondsBetweenLeaderboardDisplay, 'seconds').toDate();\n        }\n        return prevState.showLeaderboardDate;\n    }\n\n    userSubmittedShowLeaderboard = () => {\n        this.setState(() => {\n            return {\n                showLeaderboard: true,\n                showLeaderboardDate: moment().toDate(),\n            }\n        });\n    }\n\n    getValidEmotes = (state: IState) => {\n        return state.selectedEmotes.filter((item: ISelectedEmoteMeta) => {\n            return item.expiryDate > new Date();\n        })\n    }\n\n    setSelectedEmote = (newEmoteViewModel: StreamEmoteFromUserViewModel) => {\n        this.setState(this.manipulateStateOnSelectedEmote(newEmoteViewModel));\n    }\n\n    manipulateStateOnSelectedEmote = (newEmoteViewModel: StreamEmoteFromUserViewModel) => (prevState: IState) => {\n        const majorAnimClass = riggedRoll<string>(this.state.majorAnimationDice, MajorAnimationTypes);\n        const majorAnimDurClass = riggedRoll<string>(this.state.majorAnimationDurationDice, MajorAnimationDurationTypes);\n        const majorAnimVariantClass = riggedRoll<string>(this.state.majorAnimationVariationDice, MajorAnimationVariationTypes);\n\n        const minorAnimClass = riggedRoll<string>(this.state.minorAnimationDice, MinorAnimationTypes);\n        const minorAnimDurClass = riggedRoll<string>(this.state.minorAnimationDurationDice, MinorAnimationDurationTypes);\n\n        const newEmoteObj = {\n            selectedEmote: newEmoteViewModel.emoteId,\n\n            majorAnimClass,\n            majorAnimDurClass,\n            majorAnimVariantClass,\n\n            minorAnimClass,\n            minorAnimDurClass,\n\n            expiryDate: addSeconds(new Date(), emoteDurationInSeconds),\n        };\n        const validSelectedEmotes = this.getValidEmotes(prevState);\n\n        return {\n            selectedEmotes: [...validSelectedEmotes, newEmoteObj],\n            leaderboardUsers: this.addToLeaderboard(prevState, newEmoteViewModel),\n        }\n    }\n\n    renderEmote = (emote: ISelectedEmoteMeta): ReactNode => {\n        const emoteObj = StreamAvailableEmotes.find((sae: IStreamEmoteButton) => sae.id === emote.selectedEmote);\n        if (emoteObj == null) return null;\n\n        const keyBase = `emote: ${emote.selectedEmote}, date: ${emote.expiryDate.toISOString()}`;\n        const {\n            majorAnimClass, majorAnimDurClass, majorAnimVariantClass,\n            minorAnimDurClass, minorAnimClass\n        } = emote;\n        return (\n            <div key={keyBase} data-key={keyBase} className={classNames(majorAnimClass, majorAnimDurClass, majorAnimVariantClass)} draggable={false}>\n                <div className={classNames(minorAnimClass, minorAnimDurClass)} draggable={false}>\n                    <BasicImage\n                        classNames=\"dashboard-emote\"\n                        imageUrl={emoteObj.imageUrl}\n                        imageName={emoteObj.imageName}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        const validSelectedEmotes = this.getValidEmotes(this.state);\n        const { showLeaderboard, leaderboardUsers } = this.state;\n        console.warn({ showLeaderboard })\n\n        return (\n            <div id=\"main\" className=\"height-100vh\" draggable={false}>\n                <Leaderboard\n                    key={leaderboardUsers.length}\n                    title=\"Top 5 emoji clickers - Stream\"\n                    showLeaderboard={showLeaderboard}\n                    rankings={leaderboardUsers}\n                    numberOfUsersOnLeaderboard={numberOfUsersOnLeaderboard}\n                />\n                {\n                    validSelectedEmotes.map(this.renderEmote).filter(node => node != null)\n                }\n            </div>\n        );\n    }\n}\n\n\nexport const DashboardPage = withServices<IWithoutExpectedServices, IExpectedServices>(\n    DashboardPageUnconnected,\n    dependencyInjectionToProps\n);\n\n","\nimport { IDependencyInjection } from '../../integration/dependencyInjection';\nimport { EmoteClient } from '../../services/common/signal/EmoteClient';\n\nexport interface IExpectedServices {\n    emoteClient: EmoteClient;\n}\n\nexport const dependencyInjectionToProps = (services: IDependencyInjection): IExpectedServices => {\n    return {\n        emoteClient: services.emoteClient,\n    }\n};","import React from 'react';\n\nexport const Loading: React.FC = () => {\n    return (\n        <>\n            <div className=\"full-page-loader opacity80\"></div>\n            <div className=\"full-page-loader\">\n                <div className=\"cssload-container\">\n                    <ul className=\"cssload-flex-container\">\n                        <li style={{ listStyleType: 'none' }}>\n                            <img\n                                src=\"/assets/img/loader.svg\"\n                                draggable=\"false\"\n                                alt=\"loading-animation\"\n                            />\n                            <h2 className=\"largeHeading\">Loading...</h2>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </>\n    );\n}\n\nexport const SmallLoading: React.FC = () => {\n    return (\n        <div className=\"container\">\n            <div className=\"row\">\n                <div className=\"col-12\" style={{ textAlign: 'center' }}>\n                    <img\n                        src=\"/assets/img/loader_secondary.svg\"\n                        draggable=\"false\"\n                        alt=\"loading-animation\"\n                        style={{ height: '75px', display: 'inline' }}\n                    />\n                    <h2 className=\"largeHeading\" style={{ display: 'inline', verticalAlign: 'middle' }}>Loading...</h2>\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\n\nimport { ISelectedEmoteMeta, StreamEmoteContainer } from '../../components/streamEmotes/streamEmoteContainer';\nimport { dependencyInjectionToProps, IExpectedServices } from './videoOverlay.dependencyInjection';\n\nimport { SmallLoading } from '../../components/loading';\nimport { StreamAvailableEmotes } from '../../constants/emote/streamEmotes';\nimport { EmoteButton } from '../../constants/emote/emoteButton';\nimport { withServices } from '../../integration/dependencyInjection';\nimport { addMilliseconds } from '../../helper/dateHelper';\n\ndeclare global {\n    interface Window {\n        Twitch: any\n    }\n}\n\ninterface IWithoutExpectedServices {\n    wrapperClass: string;\n}\n\ninterface IProps extends IExpectedServices, IWithoutExpectedServices { }\n\ninterface IState {\n    selectedEmote: EmoteButton;\n    receivedEmotes: Array<ISelectedEmoteMeta>;\n    emotesHistory: Array<ISelectedEmoteMeta>;\n\n    // Twitch\n    twitch: any\n    finishedLoading: boolean,\n    isVisible: boolean,\n}\n\nexport class VideoOverlayUnconnected extends React.Component<IProps, IState> {\n    constructor(props: IProps) {\n        super(props);\n\n        this.state = {\n            selectedEmote: EmoteButton.none,\n            receivedEmotes: [],\n            emotesHistory: [],\n            //if the extension is running on twitch or dev rig, set the shorthand here. otherwise, set to null. \n            twitch: window.Twitch ? window.Twitch.ext : null,\n            finishedLoading: false,\n            isVisible: true\n        };\n    }\n\n    componentDidMount() {\n        this.props.emoteClient.listenToEmote(this.receiveSelectedEmote);\n\n        if (this.state.twitch) {\n            this.state.twitch.onAuthorized((auth: any) => {\n                this.props.twitchAuthService.setToken(auth.token, auth.userId)\n                if (!this.state.finishedLoading) {\n                    // if the component hasn't finished loading (as in we've not set up after getting a token), let's set it up now.\n\n                    // now we've done the setup for the component, let's set the state to true to force a rerender with the correct data.\n                    this.setState(() => {\n                        return { finishedLoading: true }\n                    })\n                }\n            })\n\n            this.state.twitch.listen('broadcast', (target: any, contentType: any, body: any) => {\n                this.state.twitch.rig?.log?.(`New PubSub message!\\n${target}\\n${contentType}\\n${body}`)\n                // now that you've got a listener, do something with the result... \n\n                // do something...\n\n            })\n\n            this.state.twitch.onVisibilityChanged((isVisible: any, _c: any) => {\n                this.visibilityChanged(isVisible)\n            })\n\n            this.state.twitch.onContext((context: any, delta: any) => {\n                console.log(context, delta);\n                //this.contextUpdate(context, delta)\n            })\n        }\n    }\n\n    componentWillUnmount() {\n        this.props.emoteClient.removeListenToEmote(this.receiveSelectedEmote);\n        if (this.state.twitch) {\n            this.state.twitch.unlisten('broadcast', () => console.log('successfully unlistened'))\n        }\n    }\n\n    visibilityChanged(isVisible: boolean) {\n        this.setState(() => {\n            return {\n                isVisible\n            }\n        })\n    }\n\n    getValidEmotes = (emotesList: Array<ISelectedEmoteMeta>): Array<ISelectedEmoteMeta> => {\n        return emotesList.filter((item: ISelectedEmoteMeta) => {\n            return item.expiryDate > new Date();\n        })\n    }\n\n    receiveSelectedEmote = (newEmote: EmoteButton) => {\n        this.setState((prevState: IState) => {\n            const newItem: ISelectedEmoteMeta = {\n                selectedEmote: newEmote,\n                expiryDate: addMilliseconds(new Date(), 500),\n            }\n            const validEmotes = this.getValidEmotes(prevState.receivedEmotes)\n            return {\n                receivedEmotes: [...validEmotes, newItem]\n            }\n        });\n\n        setTimeout(() => {\n            this.setState((prevState: IState) => {\n                return {\n                    receivedEmotes: this.getValidEmotes(prevState.receivedEmotes)\n                }\n            })\n        }, 500);\n    }\n\n    setCurrentEmote = async (newSelectedEmote: EmoteButton) => {\n    }\n\n    render() {\n        if (this.state.finishedLoading && this.state.isVisible) {\n            return (<SmallLoading />);\n        }\n\n        const availableEmotes = StreamAvailableEmotes.sort((a, b) => a.sortOrder - b.sortOrder);\n        return (\n            <section id=\"emote\" className={`wrapper ${this.props.wrapperClass}`}>\n                <div className=\"inner\">\n                    <header className=\"\">\n                        <h2>Stream emotes 🎉</h2>\n                        <p>From here you can interact with the stream by click these emotes:</p>\n                    </header>\n                    <StreamEmoteContainer\n                        receivedEmotes={this.state.receivedEmotes}\n                        availableEmotes={availableEmotes}\n                        setCurrentEmote={this.setCurrentEmote}\n                        onShowLeaderboardClick={() => { }}\n                        emoteClient={this.props.emoteClient}\n                    />\n                </div>\n            </section>\n        );\n    }\n}\n\nexport const VideoOverlayPage = withServices<IWithoutExpectedServices, IExpectedServices>(\n    VideoOverlayUnconnected,\n    dependencyInjectionToProps\n);\n","\nimport { IDependencyInjection } from '../../integration/dependencyInjection';\nimport { StreamService } from '../../services/api/StreamService';\nimport { EmoteClient } from '../../services/common/signal/EmoteClient';\nimport { TwitchAuthenticationService } from '../../services/twitch/TwitchAuthenticationService';\n\nexport interface IExpectedServices {\n    emoteClient: EmoteClient;\n    streamService: StreamService;\n    twitchAuthService: TwitchAuthenticationService;\n}\n\nexport const dependencyInjectionToProps = (services: IDependencyInjection): IExpectedServices => {\n    const { emoteClient, twitchAuthService, streamService, } = services;\n    return {\n        emoteClient,\n        twitchAuthService,\n        streamService,\n    }\n};","import React, { useEffect } from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport * as route from './constants/route';\nimport { ScrollToTop } from './components/common/scroll/scrollToTop';\nimport { setBodyLoadingClass } from './helper/documentHelper';\nimport { HomePage } from './pages/home';\nimport { DashboardPage } from './pages/dashboard/dashboard';\nimport { VideoOverlayPage } from './pages/twitch/videoOverlay';\n\nexport const App: React.FC = () => {\n  const effectTracker = '';\n  useEffect(() => {\n    setTimeout(() => {\n      setBodyLoadingClass(false);\n    }, 100);\n  }, [effectTracker]);\n  return (\n    <ScrollToTop>\n      <Switch>\n        <Route exact={true} path={route.home} component={HomePage} />\n        <Route path={route.dashboard} component={DashboardPage} />\n        <Route path={route.videoOverlay} component={VideoOverlayPage} />\n      </Switch>\n    </ScrollToTop>\n  );\n}\n\n","// export const setDocumentTitle = (title: string) => {\n//     document.title = getNewDocumentTitle(title);\n// }\n\n// export const getNewDocumentTitle = (title: string) => `${title} - AssistantApps`;\n\nexport const setBodyLoadingClass = (isLoading: boolean) => {\n    if (isLoading) {\n        document.body.classList.add('is-loading');\n    } else {\n        document.body.classList.remove('is-loading');\n    }\n}\n\n// export const setBodyOverflowClass = (dialogIsOpen: boolean) => {\n//     if (dialogIsOpen) {\n//         document.body.classList.add('overflow-hidden');\n//     } else {\n//         document.body.classList.remove('overflow-hidden');\n//     }\n// }\n\n","export const home = '/';\nexport const dashboard = '/dash';\nexport const videoOverlay = '/video_overlay.html';","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reportWebVitals from './reportWebVitals';\nimport { ToastContainer } from 'react-toastify';\nimport { HashRouter } from 'react-router-dom';\n\nimport { DependencyInjectionProvider } from './integration/dependencyInjection';\n\nimport { getJSON, defaultConfig } from './utils';\nimport { loadStateFromLocalStorage, saveStateToLocalStorage } from './redux/stateFromLocalStorage';\nimport { reducer } from './redux';\n\nimport * as serviceWorker from './serviceWorker';\n\nimport { App } from './appShell';\nimport './scss/main.scss';\nimport './scss/custom.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\ndeclare global {\n  interface Window {\n    config: any;\n    Twitch: any\n    registration: any\n  }\n}\n\nlet persistedState: any = loadStateFromLocalStorage();\n\nconst store = createStore(\n  reducer,\n  persistedState,\n);\n\nstore.subscribe(() => saveStateToLocalStorage(store));\n\nwindow.config = window.config || {};\ngetJSON('/assets/config.json', (status: boolean, response: string) => {\n  window.config = (status === true)\n    ? response || {}\n    : defaultConfig;\n\n  if (window.config.consoleLogDebug) console.log('Config', window.config);\n\n  // initAnalytics();\n  // initLocalization(store.getState()?.settingReducer?.selectedLanguage ?? 'en');\n\n  const app = (\n    <DependencyInjectionProvider>\n      <React.StrictMode>\n        <Provider store={store}>\n          <HashRouter>\n            <App />\n            <ToastContainer newestOnTop={false} />\n          </HashRouter>\n        </Provider>\n      </React.StrictMode>\n    </DependencyInjectionProvider>\n  );\n  ReactDOM.render(app, document.getElementById('streamApp'));\n\n  if (window.config.reportWebVitals) {\n    // If you want to start measuring performance in your app, pass a function\n    // to log results (for example: reportWebVitals(console.log))\n    // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n    reportWebVitals(console.log);\n  }\n\n  if (window.config.useServiceWorker) {\n    serviceWorker.register({\n      onUpdate: registration => {\n        console.log('ServiceWorker Update')\n        // toast.info(<UpdateButton onClick={() => updateServiceWorker(registration)} />, {\n        //   autoClose: false,\n        //   hideProgressBar: true,\n        //   closeOnClick: true,\n        //   pauseOnHover: true,\n        //   draggable: true,\n        // });\n      }\n    });\n  }\n  else {\n    serviceWorker.unregister();\n  }\n})\n\n","import * as CacheKey from './cacheKey';\n\nimport { initialCommonState } from './modules/common/index';\nimport { initialSettingState } from './modules/setting/index';\nimport { StateCommonReducer } from './state/StateCommonReducer';\nimport { StateSettingReducer } from './state/StateSettingReducer';\n\n\nexport const loadStateFromLocalStorage = () => {\n    let commonReducer = initialCommonState;\n    let storedCommonReducer = localStorage.getItem(CacheKey.CommonReducerKey);\n    if (storedCommonReducer && storedCommonReducer !== \"undefined\") {\n        commonReducer = JSON.parse(storedCommonReducer || '{}');\n    }\n\n    let settingReducer = initialSettingState;\n    let storedSettingReducer = localStorage.getItem(CacheKey.SettingReducerKey);\n    if (storedSettingReducer && storedSettingReducer !== \"undefined\") {\n        settingReducer = JSON.parse(storedSettingReducer || '{}');\n    }\n\n    let persistedState: any = {\n        settingReducer,\n        commonReducer,\n    }\n    return persistedState;\n}\n\nexport const saveStateToLocalStorage = (store: any) => {\n    var currentCommonReducer = store.getState().commonReducer;\n    var storedCommonReducer: StateCommonReducer = JSON.parse(localStorage.getItem(CacheKey.CommonReducerKey) || '{}');\n    if (storedCommonReducer == null\n        || storedCommonReducer.userGuid !== currentCommonReducer.userGuid\n        || storedCommonReducer.userName !== currentCommonReducer.userName\n        || storedCommonReducer.userProfileUrl !== currentCommonReducer.userProfileUrl\n        || storedCommonReducer.userDetailsExpiryDate !== currentCommonReducer.userDetailsExpiryDate\n    ) {\n        currentCommonReducer.isLoading = false;\n        localStorage.setItem(CacheKey.CommonReducerKey, JSON.stringify(currentCommonReducer));\n    }\n\n    var currentSettingReducer = store.getState().settingReducer;\n    var storedSettingReducer: StateSettingReducer = JSON.parse(localStorage.getItem(CacheKey.SettingReducerKey) || '{}');\n    if (storedSettingReducer == null\n        || storedSettingReducer.isDark !== currentSettingReducer.isDark\n    ) {\n        localStorage.setItem(CacheKey.SettingReducerKey, JSON.stringify(currentSettingReducer));\n    }\n}"],"sourceRoot":""}